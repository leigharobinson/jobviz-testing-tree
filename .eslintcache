[{"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/index.js":"1","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/JobViz.js":"2","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/images/PrupleDot.js":"3","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/ApplicationViews.js":"4","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/title/Title.js":"5","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/modules/JobManager.js":"6","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/Helper.js":"7","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeList.js":"8","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeCard.js":"9","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoList.js":"10","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoCard.js":"11","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneCard.js":"12","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneList.js":"13","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourList.js":"14","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourCard.js":"15","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level0/Jobs.js":"16","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoEndpointList.js":"17","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeEndpointList.js":"18","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourEndpointList.js":"19","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/search/Search.js":"20","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/table/Table.js":"21"},{"size":572,"mtime":1607031059345,"results":"22","hashOfConfig":"23"},{"size":190,"mtime":1607028507207,"results":"24","hashOfConfig":"23"},{"size":660,"mtime":1606940842610,"results":"25","hashOfConfig":"23"},{"size":3082,"mtime":1607463446974,"results":"26","hashOfConfig":"23"},{"size":311,"mtime":1607193598843,"results":"27","hashOfConfig":"23"},{"size":277,"mtime":1607452489594,"results":"28","hashOfConfig":"23"},{"size":434,"mtime":1607973281698,"results":"29","hashOfConfig":"23"},{"size":6594,"mtime":1607459754239,"results":"30","hashOfConfig":"23"},{"size":1815,"mtime":1607459754238,"results":"31","hashOfConfig":"23"},{"size":5953,"mtime":1607459754238,"results":"32","hashOfConfig":"23"},{"size":1901,"mtime":1607459754237,"results":"33","hashOfConfig":"23"},{"size":1591,"mtime":1607459754237,"results":"34","hashOfConfig":"23"},{"size":4977,"mtime":1607459754237,"results":"35","hashOfConfig":"23"},{"size":7622,"mtime":1607459754240,"results":"36","hashOfConfig":"23"},{"size":993,"mtime":1607973281699,"results":"37","hashOfConfig":"23"},{"size":829,"mtime":1607459754236,"results":"38","hashOfConfig":"23"},{"size":6191,"mtime":1607459754238,"results":"39","hashOfConfig":"23"},{"size":6717,"mtime":1607459754239,"results":"40","hashOfConfig":"23"},{"size":7616,"mtime":1607459754240,"results":"41","hashOfConfig":"23"},{"size":878,"mtime":1607452489594,"results":"42","hashOfConfig":"23"},{"size":1774,"mtime":1607459754241,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1x6cskc",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"46"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/index.js",[],["99","100"],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/JobViz.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/images/PrupleDot.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/ApplicationViews.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/title/Title.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/modules/JobManager.js",["101"],"const remoteURL = \"http://localhost:8088\";\n\nexport default {\n    getAll() {\n        return fetch(`${remoteURL}/jobs`).then((result) => result.json());\n      },\n    getJob(param) {\n        return fetch(`${remoteURL}/jobs?title=${param}`).then((result) => result.json());\n    }\n}",["102","103"],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/Helper.js",["104"],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeList.js",["105","106","107","108","109"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelThreeCard} from \"./LevelThreeCard\"\nimport {makeStringPath, removeDash} from \"../Helper\"\nimport { Link } from \"react-router-dom\";\nimport {Table} from \"../table/Table\"\nimport {Search} from \"../search/Search\"\n\nexport const LevelThreeList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [jobName, setJobName] = useState([]);\n    const [jobObj, setJobObj] = useState({\n        id: 0,\n        title: \"\",\n        Hierarchy: \"\",\n        OccupationType: \"\",\n        Employment2016: 0,\n        Employment2026: 0,\n        ChgEmploy2016to26Num: 0,\n        ChgEmploy2016to26Perc: 0,\n        PercentSelfEmployed2016: 0,\n        OccupationalOpenings2016to2026AnnualAverage: 0,\n        MedianAnnualWage2017: \"\",\n        TypicalEducationNeededForEntr: \"\",\n        WorkExperienceInARelatedOccupation: \"\",\n        TypicalOnTheJobTrainingNeededToAttainCompetencyInTheOccupation: \"\",\n        ttl: \"\",\n        Level0: \"\",\n        Level4: \"\",\n        Level3: \"\",\n        Level2: \"\",\n        Level1: \"\",\n        pathString: \"\",\n        Def: \"\",\n    \n        });\n\n    // the level 1 category url sting we need to pass to children\n    const levelOneUrl = props.levelOneUrl;\n    \n    // the level 2 category url sting we need to pass to children\n    const levelTwoUrl = props.category;\n\n       //we only select level 2 categories that have the same level 1 category\n    let levelOneString = makeStringPath(props.levelOneUrl);\n    // console.log(levelOneString)\n\n     //the level 2 category 'normal' string we need to match to make sure \n    //we only select level 3 categories that have the same level 1 category\n    let levelTwoString = makeStringPath(props.category);\n    // console.log(levelTwoString)\n\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n//    console.log(levelList, \"Here it is\")\n    const filterlevelThree = () => jobs.filter((jobCategory) => {\n        let noDash = removeDash(jobCategory.Level2)\n        if (noDash === levelTwoString && jobCategory.Level3 !== \"NA\" && !levelList.includes(jobCategory.Level3)) {\n            levelList.push(jobCategory.Level3)\n        }\n    });\n\n    //call filter\n    filterlevelThree();  \n     //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort();\n    // console.log(\"LevelList\", LevelOneList)\n\n     //OBJECT \n    //This get's the id of whatever category was clicked\n    //THis is the Functionality to get object for Table\n    useEffect(() => {\n        getClickedJobObject();\n        }, )\n            \n    const getClickedJobObject = () => {\n        const arrayHold = [];\n        jobs.some(function (job) {\n            arrayHold.push(job.ttl === jobName)  \n            })\n\n        // console.log(arrayHold);\n        if (arrayHold.includes(true)) {\n             // console.log(\"Array Hold had one true value\")\n            jobs.filter((jobObj) => {\n                if(jobName === jobObj.ttl){\n                    setJobObj(jobObj)\n                }\n            })\n        } else{\n            jobs.filter((jobObj) => {\n                if(levelTwoString === jobObj.ttl || levelTwoString === jobObj.title){\n                    setJobObj(jobObj)\n                }\n            })\n        };     \n    };\n\n         ///THis is just a test run for search bar choices\n        ///is this where I should pull all titles?\n    //Search Functionality ???????\n    let jobTitleList =[]\n    const getAllJobNames = () => jobs.filter((job) => {\n            jobTitleList.push(job.title)\n        })\n\n    getAllJobNames();\n   \n\n   return (\n        <>\n        <div>\n            <Title />\n        </div>\n        <div>\n                <Search jobs={jobs} jobTitleList={jobTitleList} {...props}  />\n            </div>\n        <div className=\"jobviz-header\">    \n                \n                <h4>{levelTwoString}</h4>\n             \n        </div> \n        <div className=\"crumbs\">\n                    <small><Link to={\"/\"}>Jobs</Link> > <Link to={\"/job-catagories\"}>Job Categories</Link> > <Link to={`/job-catagories/${levelOneUrl}`}>{levelOneString}</Link> > {levelTwoString}</small>\n        </div>  \n        \n        <div className=\"jobviz-parent\"> \n            <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                        props.history.push(\"/\");\n                        // console.log(\"you clicked me\");\n                }}>-</div>  \n                </div>\n            <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                            props.history.push(\"/job-catagories\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                </div>\n            <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                            props.history.push(`/job-catagories/${levelOneUrl}`);\n                            console.log(\"you clicked me\");\n                }}>-</div> \n            </div>\n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"option\" onClick={() =>setJobName(orderedCategory)}> \n                                <LevelThreeCard\n                                    key={orderedCategory}\n                                    orderedCategory={orderedCategory}\n                                    jobs={jobs}\n                                    levelOneUrl={levelOneUrl}\n                                    levelTwoUrl={levelTwoUrl}\n                                    {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n                <div className=\"jobviz-parent\">\n                    <Table jobObj={jobObj} {...props} />\n                </div>\n    \n         \n        \n        \n        \n    </>\n)\n}","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeCard.js",["110","111","112"],"import React, { useState, useEffect } from \"react\";\nimport {makeUrlPath} from \"../Helper\"\n\n\n\nexport const LevelThreeCard = (props) => {\n  let levelOneUrl = props.levelOneUrl;\n  let levelTwoUrl = props.levelTwoUrl;\n  let categoryStr = props.orderedCategory;\n  let category = makeUrlPath(categoryStr);\n  let jobs = props.jobs\n\n  // LR look back at this, there must be simpler way\nlet titleStr = \"\";\nconst findObj = () => {\n  jobs.filter((job)=> {   \n    if(job.Level3 === categoryStr) {\n      \n      let emtStr = job.title;\n      \n      titleStr = emtStr;\n    }\n  })\n}\nfindObj();\n// console.log(\"THis is category\", category); \n\nif(titleStr !== categoryStr) {\n  return (\n    <>\n      <div className=\"jobviz-parent-card\">                           \n      <div className=\"btn-container\">\n          <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n              \n                              props.history.push(`/job-catagories/${levelOneUrl}/${levelTwoUrl}/${category}`);\n                              \n                        \n                    }}>+</div>\n          </div>\n          <div className=\"listed-categories\">\n              {categoryStr}\n          </div>\n\n\n    </div>\n    </>\n  );\n} else { \n    return (\n        <>\n          <div className=\"jobviz-parent-card\">\n            <div className=\"btn-container\">                        \n            <div type=\"button\" className=\"end-btn\" onClick={() => {\n                   \n                   props.history.push(`/job-catagories/${levelOneUrl}/${levelTwoUrl}/${category}/endpoint`);\n                 }}>🥨</div>\n            </div>\n            <div id={categoryStr} className=\"listed-categories\">\n                    {categoryStr}\n            </div>\n          </div>\n\n\n  \n        </>\n  );}\n  \n};\n\n\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoList.js",["113","114","115","116","117"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelTwoCard} from \"./LevelTwoCard\"\nimport {makeStringPath, removeDash} from \"../Helper\"\nimport { Link } from \"react-router-dom\";\nimport {Table} from \"../table/Table\"\nimport {Search} from \"../search/Search\"\n\nexport const LevelTwoList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [jobName, setJobName] = useState([]);\n    const [jobObj, setJobObj] = useState({\n        id: 0,\n        title: \"\",\n        Hierarchy: \"\",\n        OccupationType: \"\",\n        Employment2016: 0,\n        Employment2026: 0,\n        ChgEmploy2016to26Num: 0,\n        ChgEmploy2016to26Perc: 0,\n        PercentSelfEmployed2016: 0,\n        OccupationalOpenings2016to2026AnnualAverage: 0,\n        MedianAnnualWage2017: \"\",\n        TypicalEducationNeededForEntr: \"\",\n        WorkExperienceInARelatedOccupation: \"\",\n        TypicalOnTheJobTrainingNeededToAttainCompetencyInTheOccupation: \"\",\n        ttl: \"\",\n        Level0: \"\",\n        Level4: \"\",\n        Level3: \"\",\n        Level2: \"\",\n        Level1: \"\",\n        pathString: \"\",\n        Def: \"\",\n    \n        });\n   \n    // the level 1 category url sting we need to pass to children\n    let levelOneUrl = props.category;\n    //the level 1 category 'normal' string we need to match to make sure \n    //we only select level 2 categories that have the same level 1 category\n    let levelOneString = makeStringPath(props.category);\n\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n    // console.log(levelList, \"Here it is ONe\")\n\n    const filsterlevelTwo = () => jobs.filter((jobCategory) => {\n        let noDash = removeDash(jobCategory.Level1)\n        // console.log(noDash)\n        if (noDash === levelOneString && jobCategory.Level2 !== \"NA\" && !levelList.includes(jobCategory.Level2)) {\n            levelList.push(jobCategory.Level2)\n        }\n    });\n\n   //call filter\n    filsterlevelTwo(); \n    //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort()\n    // console.log(\"LevelList\", LevelOneList)\n\n\n    //OBJECT \n    //This get's the id of whatever category was clicked\n    //THis is the Functionality to get object for Table\n    useEffect(() => {\n        getClickedJobObject();\n        }, )\n            \n    const getClickedJobObject = () => {\n        const arrayHold = [];\n        jobs.some(function (job) {\n            arrayHold.push(job.ttl === jobName)  \n            })\n\n        // console.log(arrayHold);\n        if (arrayHold.includes(true)) {\n             // console.log(\"Array Hold had one true value\")\n            jobs.filter((jobObj) => {\n                if(jobName === jobObj.ttl){\n                    setJobObj(jobObj)\n                }\n            })\n        } else{\n            jobs.filter((jobObj) => {\n                if(levelOneString === jobObj.ttl || levelOneString === jobObj.title ){\n                    setJobObj(jobObj)\n                }\n            })\n        };     \n    };\n\n       \n        ///THis is just a test run for search bar choices\n        ///is this where I should pull all titles?\n    //Search Functionality ???????\n    let jobTitleList =[]\n    const getAllJobNames = () => jobs.filter((job) => {\n            jobTitleList.push(job.title)\n        })\n\n    getAllJobNames();\n   \n\n\n    return (\n        <>\n            <div>\n                <Title />\n            </div>        \n             <div>\n                <Search jobs={jobs} jobTitleList={jobTitleList} {...props}  />\n            </div>\n                \n            <div className=\"jobviz-header\">    \n                \n                    <h4>{levelOneString}</h4>                 \n            </div> \n            <div className=\"crumbs\">\n                        <small><Link to={\"/\"}>Jobs</Link> > <Link to={\"/job-catagories\"}>Job Categories</Link> > {levelOneString}</small>\n                    </div>\n            <div className=\"jobviz-parent\"> \n                <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                            props.history.push(\"/\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                </div>\n                <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                            props.history.push(\"/job-catagories\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                </div>\n                <div className=\"jobViz-parent\">\n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"option\" onClick={() =>setJobName(orderedCategory)}> \n                                <LevelTwoCard\n                                key={orderedCategory}\n                                orderedCategory={orderedCategory}\n                                jobs={jobs}\n                                levelOneUrl={levelOneUrl}\n                                {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n            </div>\n            <div className=\"jobviz-parent\">\n                <Table jobObj={jobObj} {...props} />\n            </div>        \n       </> \n    );\n\n   \n   \n}\n\n\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoCard.js",["118","119"],"import React from \"react\";\nimport {makeUrlPath} from \"../Helper\"\n\n\n\nexport const LevelTwoCard = (props) => {\nlet jobs = props.jobs\nlet levelOneUrl = props.levelOneUrl;\nlet categoryStr = props.orderedCategory;\n// console.log(\"THis is category string\", categoryStr)\nlet category = makeUrlPath(categoryStr);\n\n// LR look back at this, there must be simpler way\nlet titleStr = \"\";\nconst findObj = () => {\n  jobs.filter((job)=> {   \n    if(job.Level2 === categoryStr) {\n      \n      let emtStr = job.title;\n      \n      titleStr = emtStr;\n    }\n  })\n}\nfindObj();\n\nconst bkColorChange = () => {\n  document.body.style.backgroundColor = \"#282c34\"\n}\n// console.log(categoryStr);\n// console.log(titleStr);\n\n// const handleCLick = () => {\n//   console.log (props.category + \" was clicked\")\n// }\n\nif(titleStr !== categoryStr) {\n  return (\n        <>\n        <div className=\"jobviz-parent-card\">                           \n          <div className=\"btn-container\">\n            <div type=\"button\"\n                  className=\"link-btn\"\n                  onClick={() => {\n                    props.history.push(`/job-catagories/${levelOneUrl}/${category}`);\n                  }}>+</div>\n          </div>\n            <div id={categoryStr} className=\"listed-categories\">\n                {categoryStr}\n            </div>\n\n\n      </div>\n      </>\n\n  )\n} else { \n    return (\n        <>\n          <div className=\"jobviz-parent-card\">\n            <div className=\"btn-container\">                        \n              <div type=\"button\" className=\"end-btn\" onClick={() => {\n                   \n                    props.history.push(`/job-catagories/${levelOneUrl}/${category}/endpoint`);\n                  }}>🥨</div>\n            </div>\n            <div id={categoryStr} className=\"listed-categories\">\n                    {categoryStr}\n            </div>\n          </div>\n              \n\n\n        \n        </>\n  );}\n};\n\n\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneCard.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneList.js",["120","121","122","123"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelOneCard} from \"./LevelOneCard\"\nimport { Link } from \"react-router-dom\";\nimport  {Search}  from \"../search/Search\"\nimport {Table} from \"../table/Table\"\n\nexport const LevelOneList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [jobName, setJobName] = useState([]);\n    const [jobObj, setJobObj] = useState({\n    id: 0,\n    title: \"\",\n    Hierarchy: \"\",\n    OccupationType: \"\",\n    Employment2016: 0,\n    Employment2026: 0,\n    ChgEmploy2016to26Num: 0,\n    ChgEmploy2016to26Perc: 0,\n    PercentSelfEmployed2016: 0,\n    OccupationalOpenings2016to2026AnnualAverage: 0,\n    MedianAnnualWage2017: \"\",\n    TypicalEducationNeededForEntr: \"\",\n    WorkExperienceInARelatedOccupation: \"\",\n    TypicalOnTheJobTrainingNeededToAttainCompetencyInTheOccupation: \"\",\n    ttl: \"\",\n    Level0: \"\",\n    Level4: \"\",\n    Level3: \"\",\n    Level2: \"\",\n    Level1: \"\",\n    pathString: \"\",\n    Def: \"\",\n\n    })\n\n   //set job obj from GET call to state\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n  \n    //empty arry to push names of targeted level (Level1)\n  \n    let levelList = []\n    // console.log(levelList)\n    const filterLevelOne = () => jobs.filter((jobCategory) => {\n        if (jobCategory.Level1 !== \"NA\" && !levelList.includes(jobCategory.Level1)) {\n            levelList.push(jobCategory.Level1);\n        \n        }\n       \n    })\n    //call filter\n    filterLevelOne()\n    //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort()\n\n\n    //OBJECT \n    //This get's the id of whatever category was clicked\n    //THis is the Functionality to get object for Table\n    useEffect(() => {\n        getClickedJobObject();\n        }, )\n            \n    const getClickedJobObject = () => {\n        const arrayHold = [];\n        jobs.some(function (job) {\n            arrayHold.push(job.ttl === jobName)  \n            })\n\n        // console.log(arrayHold);\n        if (arrayHold.includes(true)) {\n             // console.log(\"Array Hold had one true value\")\n            jobs.filter((jobObj) => {\n                if(jobName === jobObj.ttl || jobName === jobObj.T){\n                    setJobObj(jobObj)\n                }\n            })\n        } else{\n            setJobObj(\"\")\n        };     \n    };\n\n        \n        ///THis is just a test run for search bar choices\n        ///is this where I should pull all titles?\n    //Search Functionality ???????\n        let jobTitleList =[]\n        const getAllJobNames = () => jobs.filter((job) => {\n                jobTitleList.push(job.title)\n            })\n    \n        getAllJobNames();\n       \n\n    return (\n        <>\n            <div>\n                <Title />\n            </div>\n            <div>\n                <Search jobs={jobs} jobTitleList={jobTitleList} {...props}  />\n            </div>\n            <div className=\"jobviz-header\" >    \n                \n                    <h4>Categories List</h4>\n                  \n            </div>  \n            <div className=\"crumbs\">\n                <small><Link to={\"/\"}>Jobs</Link> > Job Categories</small>\n            </div>\n               \n            <div className=\"jobviz-parent\"> \n                <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                            props.history.push(\"/\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                </div>\n                <div className=\"jobs-parent\">\n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory, index) => {\n                            return (\n                                <>\n                                <div key={orderedCategory} onClick={() =>setJobName(orderedCategory)}  className=\"\" >\n                                    <LevelOneCard\n                                        \n                                        id={orderedCategory.id}\n                                        key={orderedCategory}\n                                        orderedCategory={orderedCategory}\n                                        jobs={jobs}\n                                        {...props}\n                                    />  \n                                </div>\n                                </>\n                            )\n                        })}\n                    </div>\n                </div>\n            </div>        \n            <div className=\"jobviz-parent\">\n                <Table jobObj={jobObj} {...props} />\n            </div>\n       </> \n    );\n};","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourList.js",["124","125","126","127","128"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelFourCard} from \"./LevelFourCard\"\nimport {makeStringPath, removeDash} from \"../Helper\"\nimport { Link } from \"react-router-dom\";\nimport {Table} from \"../table/Table\"\nimport {Search} from \"../search/Search\"\n\n\nexport const LevelFourList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [jobName, setJobName] = useState([]);\n    const [jobObj, setJobObj] = useState({\n        id: 0,\n        title: \"\",\n        Hierarchy: \"\",\n        OccupationType: \"\",\n        Employment2016: 0,\n        Employment2026: 0,\n        ChgEmploy2016to26Num: 0,\n        ChgEmploy2016to26Perc: 0,\n        PercentSelfEmployed2016: 0,\n        OccupationalOpenings2016to2026AnnualAverage: 0,\n        MedianAnnualWage2017: \"\",\n        TypicalEducationNeededForEntr: \"\",\n        WorkExperienceInARelatedOccupation: \"\",\n        TypicalOnTheJobTrainingNeededToAttainCompetencyInTheOccupation: \"\",\n        ttl: \"\",\n        Level0: \"\",\n        Level4: \"\",\n        Level3: \"\",\n        Level2: \"\",\n        Level1: \"\",\n        pathString: \"\",\n        Def: \"\",\n    \n        });\n\n    // the level 1 category url sting we need to pass to children\n    const levelOneUrl = props.levelOneUrl;\n    // console.log(levelOneUrl);\n\n\n    // the level 2 category url sting we need to pass to children\n    const levelTwoUrl = props.levelTwoUrl;\n    // console.log(levelTwoUrl);\n\n\n    // the level 3 category url sting we need to pass to children\n    const levelThreeUrl = props.category;\n    // console.log(levelThreeUrl);\n\n\n    let levelOneString = makeStringPath(props.levelOneUrl);\n\n\n    //the level 2 category 'normal' string we need to match to make sure \n   //we only select level 3 categories that have the same level 1 category\n   let levelTwoString = makeStringPath(props.levelTwoUrl);\n\n\n    //the level 2 category 'normal' string we need to match to make sure \n    //we only select level 4 categories that have the same level 1 category\n    let levelThreeString = makeStringPath(props.category);\n    // console.log(levelThreeString)\n\n\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n    \n    // console.log(\"levelList\", levelList)\n    const filsterlevelFour = () => jobs.filter((jobCategory) => {\n        let noDash = removeDash(jobCategory.Level3)\n        if (noDash === levelThreeString && jobCategory.Level4 !== \"NA\" && !levelList.includes(jobCategory.Level4)) {\n            levelList.push(jobCategory.Level4)\n        }\n    });\n\n\n    //call filter\n    filsterlevelFour();  \n     //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort();\n    // console.log(\"LevelList\", LevelOneList)\n\n      //OBJECT \n    //This get's the id of whatever category was clicked\n    //THis is the Functionality to get object for Table\n    useEffect(() => {\n        getClickedJobObject();\n        }, )\n            \n    const getClickedJobObject = () => {\n        const arrayHold = [];\n        jobs.some(function (job) {\n            arrayHold.push(job.ttl === jobName)  \n            })\n\n        // console.log(arrayHold);\n        if (arrayHold.includes(true)) {\n             // console.log(\"Array Hold had one true value\")\n            jobs.filter((jobObj) => {\n                if(jobName === jobObj.ttl){\n                    setJobObj(jobObj)\n                }\n            })\n        } else {\n            jobs.filter((jobObj) => {\n                if(levelThreeString === jobObj.ttl || levelThreeString === jobObj.title){\n                    console.log(jobObj.title)\n                    setJobObj(jobObj)\n                }\n            })\n        };     \n    };\n\n         ///THis is just a test run for search bar choices\n        ///is this where I should pull all titles?\n    //Search Functionality ???????\n    let jobTitleList =[]\n    const getAllJobNames = () => jobs.filter((job) => {\n            jobTitleList.push(job.title)\n        })\n\n    getAllJobNames();\n   \n\n\n\nreturn (\n        <>\n        <div>\n            <Title />\n        </div>\n        <div>\n                <Search jobs={jobs} jobTitleList={jobTitleList} {...props}  />\n            </div>\n        <div className=\"jobviz-header\">\n                    <h4>{levelThreeString}</h4>\n                </div>  \n            <div className=\"crumbs\">\n                        <small><Link to={\"/\"}>Jobs</Link> > <Link to={\"/job-catagories\"}>Job Categories</Link> > <Link to={`/job-catagories/${levelOneUrl}`}>{levelOneString}</Link> > <Link to={`/job-catagories/${levelOneUrl}/${levelTwoUrl}`}>{levelTwoString}</Link> > {levelThreeString}</small>\n           \n        </div>\n         \n        <div className=\"jobviz-parent\"> \n            <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                            props.history.push(\"/\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                    </div>\n                <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                                props.history.push(\"/job-catagories\");\n                                // console.log(\"you clicked me\");\n                        }}>-</div>  \n                    </div>\n                <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                                props.history.push(`/job-catagories/${levelOneUrl}`);\n                                console.log(\"you clicked me\");\n                    }}>-</div> \n                </div>\n                <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                        props.history.push(`/job-catagories/${levelOneUrl}/${levelTwoUrl}`);\n                        // console.log(\"you clicked me\");\n                }}>-</div>  \n                </div>\n                 \n       \n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"option\" onClick={() =>setJobName(orderedCategory)}> \n                                <LevelFourCard\n                                    key={orderedCategory}\n                                    orderedCategory={orderedCategory}\n                                    jobs={jobs}\n                                    levelOneUrl={levelOneUrl}\n                                    levelTwoUrl={levelTwoUrl}\n                                    levelThreeUrl={levelThreeUrl}\n                                    {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n                <div className=\"jobviz-parent\">\n                    <Table jobObj={jobObj} {...props} />\n                </div>   \n            \n    \n         \n        \n        \n        \n    </>\n)\n}","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourCard.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level0/Jobs.js",["129"],"import React, {useState} from \"react\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport  {Search}  from \"../search/Search\"\nimport {Table} from \"../table/Table\"\n\nexport const Jobs = (props) => {\nconst [jobObj, setJobObj] = useState(\"\")\n\nreturn ( \n    <>\n    <div>\n        <Title />\n    </div>\n    <div>\n        <Search />\n    </div>\n    <div className=\"jobviz-parent\"> \n        \n            <div type=\"button\"\n                className=\"link-btn\"\n                onClick={() => {\n                props.history.push(\"/job-catagories\");\n                // console.log(\"you clicked me\");\n        }}> + </div>\n        \n\n            <p className=\"option\">Jobs</p>\n        \n    \n    \n    </div>\n    <div className=\"jobviz-parent\">\n        <Table jobObj={jobObj} {...props} />\n    </div>\n    \n</>\n\n)\n   \n        }","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoEndpointList.js",["130","131","132","133","134"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelTwoCard} from \"./LevelTwoCard\"\nimport {makeStringPath, removeDash} from \"../Helper\"\nimport { Link } from \"react-router-dom\";\nimport {Table} from \"../table/Table\"\nimport {Search} from \"../search/Search\"\n\nexport const LevelTwoEndpointList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [jobName, setJobName] = useState([]);\n    const [jobObj, setJobObj] = useState({\n        id: 0,\n        title: \"\",\n        Hierarchy: \"\",\n        OccupationType: \"\",\n        Employment2016: 0,\n        Employment2026: 0,\n        ChgEmploy2016to26Num: 0,\n        ChgEmploy2016to26Perc: 0,\n        PercentSelfEmployed2016: 0,\n        OccupationalOpenings2016to2026AnnualAverage: 0,\n        MedianAnnualWage2017: \"\",\n        TypicalEducationNeededForEntr: \"\",\n        WorkExperienceInARelatedOccupation: \"\",\n        TypicalOnTheJobTrainingNeededToAttainCompetencyInTheOccupation: \"\",\n        ttl: \"\",\n        Level0: \"\",\n        Level4: \"\",\n        Level3: \"\",\n        Level2: \"\",\n        Level1: \"\",\n        pathString: \"\",\n        Def: \"\",\n    \n        })\n    \n      //endpoint\n    let endpoint = props.category\n    // console.log(\"endpoint\", endpoint)\n    // the level 1 category url sting we need to pass to children\n    let levelOneUrl = props.levelOneUrl;\n    // console.log(\"levelONe URL\",levelOneUrl)\n    //the level 1 category 'normal' string we need to match to make sure \n    //we only select level 2 categories that have the same level 1 category\n    let levelOneString = makeStringPath(levelOneUrl);\n    let endpointString = makeStringPath(endpoint);\n\n   \n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n    // console.log(levelList, \"Here it is ONe\")\n\n    const filterlevelTwo = () => jobs.filter((jobCategory) => {\n        let noDash = removeDash(jobCategory.Level1)\n        // console.log(noDash)\n        if (noDash === levelOneString && jobCategory.Level2 !== \"NA\" && !levelList.includes(jobCategory.Level2)) {\n            levelList.push(jobCategory.Level2)\n        }\n    });\n\n   //call filter\n    filterlevelTwo(); \n    //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort()\n    // console.log(\"LevelList\", LevelOneList)\n\n\n    \n    //OBJECT \n    //This get's the id of whatever category was clicked\n    //THis is the Functionality to get object for Table\n    useEffect(() => {\n        getClickedJobObject();\n        }, )\n            \n    const getClickedJobObject = () => {\n        const arrayHold = [];\n        jobs.some(function (job) {\n            arrayHold.push(job.ttl === jobName)  \n            })\n\n        // console.log(arrayHold);\n        if (arrayHold.includes(true)) {\n             // console.log(\"Array Hold had one true value\")\n            jobs.filter((jobObj) => {\n                if(jobName === jobObj.ttl){\n                    setJobObj(jobObj)\n                }\n            })\n        } else{\n            jobs.filter((jobObj) => {\n                if(endpointString === jobObj.ttl || endpointString === jobObj.title ){\n                    setJobObj(jobObj)\n                }\n            })\n        };     \n    };\n\n      \n        ///THis is just a test run for search bar choices\n        ///is this where I should pull all titles?\n    //Search Functionality ???????\n    let jobTitleList =[]\n    const getAllJobNames = () => jobs.filter((job) => {\n            jobTitleList.push(job.title)\n        })\n\n    getAllJobNames();\n   \n\n    return (\n        <>\n            <div>\n                <Title />\n            </div>        \n            <div>\n                <Search jobs={jobs} jobTitleList={jobTitleList} {...props}  />\n            </div>\n                \n            <div className=\"jobviz-header\">       \n                <h4>{levelOneString}</h4>                 \n            </div> \n            <div className=\"crumbs\">\n                <small><Link to={\"/\"}>Jobs</Link> > <Link to={\"/job-catagories\"}>Job Categories</Link> > <Link to={`/job-catagories/${levelOneUrl}`}>{levelOneString}</Link> > {endpointString}</small>\n            </div>\n            <div className=\"jobviz-parent\"> \n                <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                            props.history.push(\"/\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                </div>\n                <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                            props.history.push(\"/job-catagories\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                </div>\n                <div className=\"jobViz-parent\">\n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"option\" onClick={() =>setJobName(orderedCategory)}> \n                                <LevelTwoCard\n                                key={orderedCategory}\n                                orderedCategory={orderedCategory}\n                                jobs={jobs}\n                                levelOneUrl={levelOneUrl}\n                                {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n            </div>\n            <div className=\"jobviz-parent\">\n                <Table jobObj={jobObj} {...props} />\n            </div>        \n       </> \n    );\n\n   \n   \n}\n\n\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeEndpointList.js",["135","136","137","138","139"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelThreeCard} from \"./LevelThreeCard\"\nimport {makeStringPath, removeDash} from \"../Helper\"\nimport { Link } from \"react-router-dom\";\nimport {Table} from \"../table/Table\"\nimport {Search} from \"../search/Search\"\n\nexport const LevelThreeEndpointList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [jobName, setJobName] = useState([]);\n    const [jobObj, setJobObj] = useState({\n        id: 0,\n        title: \"\",\n        Hierarchy: \"\",\n        OccupationType: \"\",\n        Employment2016: 0,\n        Employment2026: 0,\n        ChgEmploy2016to26Num: 0,\n        ChgEmploy2016to26Perc: 0,\n        PercentSelfEmployed2016: 0,\n        OccupationalOpenings2016to2026AnnualAverage: 0,\n        MedianAnnualWage2017: \"\",\n        TypicalEducationNeededForEntr: \"\",\n        WorkExperienceInARelatedOccupation: \"\",\n        TypicalOnTheJobTrainingNeededToAttainCompetencyInTheOccupation: \"\",\n        ttl: \"\",\n        Level0: \"\",\n        Level4: \"\",\n        Level3: \"\",\n        Level2: \"\",\n        Level1: \"\",\n        pathString: \"\",\n        Def: \"\",\n    \n        })\n    //endpoint\n    let endpoint = props.category\n    // the level 1 category url sting we need to pass to children\n    const levelOneUrl = props.levelOneUrl;\n    // the level 2 category url sting we need to pass to children\n    const levelTwoUrl = props.levelTwoUrl;\n       //we only select level 2 categories that have the same level 1 category\n    let levelOneString = makeStringPath(levelOneUrl);\n     //the level 2 category 'normal' string we need to match to make sure \n    //we only select level 3 categories that have the same level 1 category\n    let levelTwoString = makeStringPath(levelTwoUrl);\n\n    let endpointString = makeStringPath(endpoint);\n\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n//    console.log(levelList, \"Here it is\")\n    const filterlevelThree = () => jobs.filter((jobCategory) => {\n        let noDash = removeDash(jobCategory.Level2)\n        if (noDash === levelTwoString && jobCategory.Level3 !== \"NA\" && !levelList.includes(jobCategory.Level3)) {\n            levelList.push(jobCategory.Level3)\n        }\n    });\n\n    //call filter\n    filterlevelThree();  \n     //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort();\n    // console.log(\"LevelList\", LevelOneList)\n\n    \n    //OBJECT \n    //This get's the id of whatever category was clicked\n    //THis is the Functionality to get object for Table\n    useEffect(() => {\n        getClickedJobObject();\n        }, )\n            \n    const getClickedJobObject = () => {\n        const arrayHold = [];\n        jobs.some(function (job) {\n            arrayHold.push(jobObj.ttl === jobName)  \n            })\n\n        // console.log(arrayHold);\n        if (arrayHold.includes(true)) {\n             // console.log(\"Array Hold had one true value\")\n            jobs.filter((jobObj) => {\n                if(jobName === jobObj.ttl){\n                    setJobObj(jobObj)\n                }\n            })\n        } else{\n            jobs.filter((jobObj) => {\n                if(endpointString === jobObj.title || endpointString === jobObj.ttl){\n                    setJobObj(jobObj)\n                }\n            })\n        };     \n    };\n\n       ///THis is just a test run for search bar choices\n        ///is this where I should pull all titles?\n    //Search Functionality ???????\n    let jobTitleList =[]\n    const getAllJobNames = () => jobs.filter((job) => {\n            jobTitleList.push(job.title)\n        })\n\n    getAllJobNames();\n\n\n\n   return (\n        <>\n        <div>\n            <Title />\n        </div>\n        <div>\n                <Search jobs={jobs} jobTitleList={jobTitleList} {...props}  />\n            </div>\n        <div className=\"jobviz-header\">    \n                \n                <h4>{endpointString}</h4>\n             \n        </div>  \n        \n        <div className=\"crumbs\">\n                    <small><Link to={\"/\"}>Jobs</Link> > <Link to={\"/job-catagories\"}>Job Categories</Link> > <Link to={`/job-catagories/${levelOneUrl}`}>{levelOneString}</Link> > <Link to={`/job-catagories/${levelOneUrl}/${levelTwoUrl}`}>{levelTwoString}</Link> > {endpointString}</small>\n        </div>  \n        \n        <div className=\"jobviz-parent\"> \n            <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                        props.history.push(\"/\");\n                        // console.log(\"you clicked me\");\n                }}>-</div>  \n                </div>\n            <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                            props.history.push(\"/job-catagories\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                </div>\n            <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                            props.history.push(`/job-catagories/${levelOneUrl}`);\n                            console.log(\"you clicked me\");\n                }}>-</div> \n            </div>\n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"option\"  onClick={() =>setJobName(orderedCategory)}> \n                                <LevelThreeCard\n                                    key={orderedCategory}\n                                    orderedCategory={orderedCategory}\n                                    jobs={jobs}\n                                    levelOneUrl={levelOneUrl}\n                                    levelTwoUrl={levelTwoUrl}\n                                    {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n                <div className=\"jobviz-parent\">\n                    <Table jobObj={jobObj} {...props} />\n                </div>\n    \n         \n        \n        \n        \n    </>\n)\n}","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourEndpointList.js",["140","141","142","143","144"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelFourCard} from \"./LevelFourCard\"\nimport {makeStringPath, removeDash} from \"../Helper\"\nimport { Link } from \"react-router-dom\";\nimport {Table} from \"../table/Table\"\nimport {Search} from \"../search/Search\"\n\n\nexport const LevelFourEndpointList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [jobName, setJobName] = useState([]);\n    const [jobObj, setJobObj] = useState({\n        id: 0,\n        title: \"\",\n        Hierarchy: \"\",\n        OccupationType: \"\",\n        Employment2016: 0,\n        Employment2026: 0,\n        ChgEmploy2016to26Num: 0,\n        ChgEmploy2016to26Perc: 0,\n        PercentSelfEmployed2016: 0,\n        OccupationalOpenings2016to2026AnnualAverage: 0,\n        MedianAnnualWage2017: \"\",\n        TypicalEducationNeededForEntr: \"\",\n        WorkExperienceInARelatedOccupation: \"\",\n        TypicalOnTheJobTrainingNeededToAttainCompetencyInTheOccupation: \"\",\n        ttl: \"\",\n        Level0: \"\",\n        Level4: \"\",\n        Level3: \"\",\n        Level2: \"\",\n        Level1: \"\",\n        pathString: \"\",\n        Def: \"\",\n    \n        });\n\n    //endpoint category\n    let category = props.category\n    // the level 1 category url string we need to pass to children\n    const levelOneUrl = props.levelOneUrl;\n    // the level 2 category url string we need to pass to children\n    const levelTwoUrl = props.levelTwoUrl;\n    // the level 3 category url string we need to pass to children\n    const levelThreeUrl = props.levelThreeUrl;\n   \n    let levelOneString = makeStringPath(levelOneUrl);\n    //the level 2 category 'normal' string we need to match to make sure \n   //we only select level 3 categories that have the same level 1 category\n   let levelTwoString = makeStringPath(levelTwoUrl);\n    //the level 2 category 'normal' string we need to match to make sure \n    //we only select level 4 categories that have the same level 1 category\n    let levelThreeString = makeStringPath(levelThreeUrl);\n    \n    let categoryString = makeStringPath(category);\n\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n    \n    // console.log(\"levelList\", levelList)\n    const filsterlevelFour = () => jobs.filter((jobCategory) => {\n        let noDash = removeDash(jobCategory.Level3)\n        if (noDash === levelThreeString && jobCategory.Level4 !== \"NA\" && !levelList.includes(jobCategory.Level4)) {\n            levelList.push(jobCategory.Level4)\n        }\n    });\n\n    //call filter\n    filsterlevelFour();  \n     //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort();\n    // console.log(\"LevelList\", LevelOneList)\n\n    \n      //OBJECT \n    //This get's the id of whatever category was clicked\n    //THis is the Functionality to get object for Table\n    useEffect(() => {\n        getClickedJobObject();\n        }, )\n            \n    const getClickedJobObject = () => {\n        const arrayHold = [];\n        jobs.some(function (job) {\n            arrayHold.push(job.ttl === jobName)  \n            })\n\n        // console.log(arrayHold);\n        if (arrayHold.includes(true)) {\n             // console.log(\"Array Hold had one true value\")\n            jobs.filter((jobObj) => {\n                if(jobName === jobObj.ttl){\n                    setJobObj(jobObj)\n                }\n            })\n        } else{\n            jobs.filter((jobObj) => {\n                if(categoryString === jobObj.ttl || categoryString === jobObj.title){\n                    setJobObj(jobObj)\n                }\n            })\n        };     \n    };\n      \n\n         ///THis is just a test run for search bar choices\n        ///is this where I should pull all titles?\n    //Search Functionality ???????\n    let jobTitleList =[]\n    const getAllJobNames = () => jobs.filter((job) => {\n            jobTitleList.push(job.title)\n        })\n\n    getAllJobNames();\n\n   return (\n        <>\n        <div>\n            <Title />\n        </div>\n        <div>\n                <Search jobs={jobs} jobTitleList={jobTitleList} {...props}  />\n            </div>\n        <div className=\"jobviz-header\">\n            <h4>{categoryString}</h4>\n        </div> \n        <div className=\"crumbs\">\n            <small><Link to={\"/\"}>Jobs</Link> > <Link to={\"/job-catagories\"}>Job Categories</Link> > <Link to={`/job-catagories/${levelOneUrl}`}>{levelOneString}</Link> > <Link to={`/job-catagories/${levelOneUrl}/${levelTwoUrl}`}>{levelTwoString}</Link> > <Link to={`/job-catagories/${levelOneUrl}/${levelTwoUrl}/${levelThreeUrl}`}>{levelThreeString}</Link> > {categoryString}</small>\n           \n        </div>\n           \n        <div className=\"jobviz-parent\"> \n            <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                            props.history.push(\"/\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                    </div>\n                <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                                props.history.push(\"/job-catagories\");\n                                // console.log(\"you clicked me\");\n                        }}>-</div>  \n                    </div>\n                <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                                props.history.push(`/job-catagories/${levelOneUrl}`);\n                                console.log(\"you clicked me\");\n                    }}>-</div> \n                </div>\n                <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                        props.history.push(`/job-catagories/${levelOneUrl}/${levelTwoUrl}`);\n                        // console.log(\"you clicked me\");\n                }}>-</div>  \n                </div>\n                 \n       \n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"option\" onClick={() =>setJobName(orderedCategory)}> \n                                <LevelFourCard\n                                    key={orderedCategory}\n                                    orderedCategory={orderedCategory}\n                                    jobs={jobs}\n                                    levelOneUrl={levelOneUrl}\n                                    levelTwoUrl={levelTwoUrl}\n                                    levelThreeUrl={levelThreeUrl}\n                                    {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n                <div className=\"jobviz-parent\">\n                    <Table jobObj={jobObj} {...props} />\n                </div>\n            \n    \n         \n        \n        \n        \n    </>\n)\n}","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/search/Search.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/table/Table.js",[],{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":3,"column":1,"nodeType":"151","endLine":10,"endColumn":2},{"ruleId":"145","replacedBy":"152"},{"ruleId":"147","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":13,"column":29,"nodeType":"156","messageId":"157","endLine":13,"endColumn":30,"suggestions":"158"},{"ruleId":"159","severity":1,"message":"160","line":66,"column":62,"nodeType":"161","messageId":"162","endLine":66,"endColumn":64},{"ruleId":"159","severity":1,"message":"163","line":88,"column":19,"nodeType":"164","messageId":"162","endLine":88,"endColumn":28},{"ruleId":"159","severity":1,"message":"160","line":95,"column":34,"nodeType":"161","messageId":"162","endLine":95,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":101,"column":34,"nodeType":"161","messageId":"162","endLine":101,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":113,"column":52,"nodeType":"161","messageId":"162","endLine":113,"endColumn":54},{"ruleId":"165","severity":1,"message":"166","line":1,"column":17,"nodeType":"167","messageId":"168","endLine":1,"endColumn":25},{"ruleId":"165","severity":1,"message":"169","line":1,"column":27,"nodeType":"167","messageId":"168","endLine":1,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":16,"column":20,"nodeType":"161","messageId":"162","endLine":16,"endColumn":22},{"ruleId":"159","severity":1,"message":"160","line":58,"column":61,"nodeType":"161","messageId":"162","endLine":58,"endColumn":63},{"ruleId":"159","severity":1,"message":"163","line":82,"column":19,"nodeType":"164","messageId":"162","endLine":82,"endColumn":28},{"ruleId":"159","severity":1,"message":"160","line":89,"column":34,"nodeType":"161","messageId":"162","endLine":89,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":95,"column":34,"nodeType":"161","messageId":"162","endLine":95,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":108,"column":52,"nodeType":"161","messageId":"162","endLine":108,"endColumn":54},{"ruleId":"159","severity":1,"message":"160","line":16,"column":20,"nodeType":"161","messageId":"162","endLine":16,"endColumn":22},{"ruleId":"165","severity":1,"message":"170","line":27,"column":7,"nodeType":"167","messageId":"168","endLine":27,"endColumn":20},{"ruleId":"159","severity":1,"message":"160","line":53,"column":60,"nodeType":"161","messageId":"162","endLine":53,"endColumn":62},{"ruleId":"159","severity":1,"message":"163","line":75,"column":19,"nodeType":"164","messageId":"162","endLine":75,"endColumn":28},{"ruleId":"159","severity":1,"message":"160","line":82,"column":34,"nodeType":"161","messageId":"162","endLine":82,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":97,"column":56,"nodeType":"161","messageId":"162","endLine":97,"endColumn":58},{"ruleId":"159","severity":1,"message":"160","line":83,"column":62,"nodeType":"161","messageId":"162","endLine":83,"endColumn":64},{"ruleId":"159","severity":1,"message":"163","line":106,"column":19,"nodeType":"164","messageId":"162","endLine":106,"endColumn":28},{"ruleId":"159","severity":1,"message":"160","line":113,"column":34,"nodeType":"161","messageId":"162","endLine":113,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":119,"column":34,"nodeType":"161","messageId":"162","endLine":119,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":132,"column":52,"nodeType":"161","messageId":"162","endLine":132,"endColumn":54},{"ruleId":"165","severity":1,"message":"171","line":8,"column":16,"nodeType":"167","messageId":"168","endLine":8,"endColumn":25},{"ruleId":"159","severity":1,"message":"160","line":64,"column":60,"nodeType":"161","messageId":"162","endLine":64,"endColumn":62},{"ruleId":"159","severity":1,"message":"163","line":89,"column":19,"nodeType":"164","messageId":"162","endLine":89,"endColumn":28},{"ruleId":"159","severity":1,"message":"160","line":96,"column":34,"nodeType":"161","messageId":"162","endLine":96,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":102,"column":34,"nodeType":"161","messageId":"162","endLine":102,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":115,"column":52,"nodeType":"161","messageId":"162","endLine":115,"endColumn":54},{"ruleId":"159","severity":1,"message":"160","line":64,"column":62,"nodeType":"161","messageId":"162","endLine":64,"endColumn":64},{"ruleId":"159","severity":1,"message":"163","line":87,"column":19,"nodeType":"164","messageId":"162","endLine":87,"endColumn":28},{"ruleId":"159","severity":1,"message":"160","line":94,"column":34,"nodeType":"161","messageId":"162","endLine":94,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":100,"column":34,"nodeType":"161","messageId":"162","endLine":100,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":112,"column":52,"nodeType":"161","messageId":"162","endLine":112,"endColumn":54},{"ruleId":"159","severity":1,"message":"160","line":72,"column":62,"nodeType":"161","messageId":"162","endLine":72,"endColumn":64},{"ruleId":"159","severity":1,"message":"163","line":95,"column":19,"nodeType":"164","messageId":"162","endLine":95,"endColumn":28},{"ruleId":"159","severity":1,"message":"160","line":102,"column":34,"nodeType":"161","messageId":"162","endLine":102,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":108,"column":34,"nodeType":"161","messageId":"162","endLine":108,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":121,"column":52,"nodeType":"161","messageId":"162","endLine":121,"endColumn":54},"no-native-reassign",["172"],"no-negated-in-lhs",["173"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["172"],["173"],"no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["174","175"],"array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.some() expects a return value from function.","FunctionExpression","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'bkColorChange' is assigned a value but never used.","'setJobObj' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"176","fix":"177","desc":"178"},{"messageId":"179","fix":"180","desc":"181"},"removeEscape",{"range":"182","text":"183"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"184","text":"185"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[202,203],"",[202,202],"\\"]