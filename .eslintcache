[{"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/index.js":"1","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/JobViz.js":"2","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/ApplicationViews.js":"3","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoList.js":"4","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeList.js":"5","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level0/Jobs.js":"6","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneList.js":"7","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoEndpointList.js":"8","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeEndpointList.js":"9","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourList.js":"10","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourEndpointList.js":"11","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoCard.js":"12","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/Helper.js":"13","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeCard.js":"14","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourCard.js":"15","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/title/Title.js":"16","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/modules/JobManager.js":"17","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/table/Table.js":"18","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/search/LRautoSearchV2.js":"19","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneCard.js":"20"},{"size":572,"mtime":1607031059345,"results":"21","hashOfConfig":"22"},{"size":190,"mtime":1607028507207,"results":"23","hashOfConfig":"22"},{"size":3082,"mtime":1607463446974,"results":"24","hashOfConfig":"22"},{"size":5673,"mtime":1609261340391,"results":"25","hashOfConfig":"22"},{"size":6610,"mtime":1609347248543,"results":"26","hashOfConfig":"22"},{"size":1749,"mtime":1609260886861,"results":"27","hashOfConfig":"22"},{"size":4487,"mtime":1609358643874,"results":"28","hashOfConfig":"22"},{"size":5876,"mtime":1609347982731,"results":"29","hashOfConfig":"22"},{"size":6646,"mtime":1609347242625,"results":"30","hashOfConfig":"22"},{"size":7088,"mtime":1609261720116,"results":"31","hashOfConfig":"22"},{"size":8240,"mtime":1608320953952,"results":"32","hashOfConfig":"22"},{"size":1835,"mtime":1609821462835,"results":"33","hashOfConfig":"22"},{"size":432,"mtime":1608063353390,"results":"34","hashOfConfig":"22"},{"size":1973,"mtime":1609348078244,"results":"35","hashOfConfig":"22"},{"size":921,"mtime":1609261735772,"results":"36","hashOfConfig":"22"},{"size":311,"mtime":1607193598843,"results":"37","hashOfConfig":"22"},{"size":275,"mtime":1609258521910,"results":"38","hashOfConfig":"22"},{"size":1774,"mtime":1607459754241,"results":"39","hashOfConfig":"22"},{"size":6657,"mtime":1608407012481,"results":"40","hashOfConfig":"22"},{"size":1402,"mtime":1609261168262,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1x6cskc",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/index.js",[],["89","90"],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/JobViz.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/ApplicationViews.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoList.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeList.js",["91","92"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\";\nimport { Title } from \"../title/Title\";\nimport \"../styling/Style.css\";\nimport { LevelThreeCard } from \"./LevelThreeCard\";\nimport { makeStringPath, removeDash } from \"../Helper\";\nimport { Link } from \"react-router-dom\";\nimport { Table } from \"../table/Table\";\n// import { Autocomplete } from \"../search/OldSearch\"\n// import {LrAutoSearch} from \"../search/LRautoSearch\"\nimport { LrAutoSearchV2 } from \"../search/LRautoSearchV2\";\nimport { LevelThreeEndpointList } from \"./LevelThreeEndpointList\";\n\nexport const LevelThreeList = (props) => {\n  //Array of job objects\n  const [jobs, setJobs] = useState([]);\n  //Alphabetical list of job Names\n  const [alphaList, setAlphaList] = useState([]);\n  //where I set the id of the category that was clicked to sate\n  const [jobTitleList, setJobTitleList] = useState([]);\n  //Where I set name of job clicked to state\n  const [jobName, setJobName] = useState([]);\n  //Where the clicked job's object is made avalile\n  const [jobObj, setJobObj] = useState({\n    id: 0,\n    title: \"\",\n    Hierarchy: \"\",\n    OccupationType: \"\",\n    Employment2016: 0,\n    Employment2026: 0,\n    ChgEmploy2016to26Num: 0,\n    ChgEmploy2016to26Perc: 0,\n    PercentSelfEmployed2016: 0,\n    OccupationalOpenings2016to2026AnnualAverage: 0,\n    MedianAnnualWage2017: \"\",\n    TypicalEducationNeededForEntr: \"\",\n    WorkExperienceInARelatedOccupation: \"\",\n    TypicalOnTheJobTrainingNeededToAttainCompetencyInTheOccupation: \"\",\n    ttl: \"\",\n    Level0: \"\",\n    Level4: \"\",\n    Level3: \"\",\n    Level2: \"\",\n    Level1: \"\",\n    pathString: \"\",\n    Def: \"\",\n  });\n\n  // the level 1 category url sting we need to pass to children\n  const levelOneUrl = props.levelOneUrl;\n\n  // the level 2 category url sting we need to pass to children\n  const levelTwoUrl = props.category;\n\n  //we only select level 2 categories that have the same level 1 category\n  let levelOneString = makeStringPath(props.levelOneUrl);\n  // console.log(levelOneString)\n\n  //the level 2 category 'normal' string we need to match to make sure\n  //we only select level 3 categories that have the same level 1 category\n  let levelTwoString = makeStringPath(props.category);\n  // console.log(levelTwoString)\n\n  useEffect(() => {\n    JobManager.getAll().then((jobs) => {\n      setJobs(jobs);\n      ///set job name to category that was clicked to get to this branch\n      //so table holds that job object's info\n      setJobName(levelTwoString);\n    });\n  }, [levelTwoString]);\n\n  useEffect(() => {\n    const filterlevelThree = () => {\n      let levelList = [];\n      jobs.forEach((jobCategory) => {\n        let noDash = removeDash(jobCategory.Level2);\n        if (\n          noDash === levelTwoString &&\n          jobCategory.Level3 !== \"NA\" &&\n          !levelList.includes(jobCategory.Level3)\n        ) {\n          levelList.push(jobCategory.Level3);\n        }\n      });\n      let sortedList = levelList.sort();\n      setAlphaList(sortedList);\n    };\n\n    filterlevelThree(jobs);\n\n    const getAllJobNames = (jobs) => {\n      let jobTList = [];\n      jobs.forEach((job) => {\n        if (!jobTList.includes(job.title)) {\n          jobTList.push(job.title);\n        }\n      });\n      setJobTitleList(jobTList);\n    };\n    ////Call the Function\n    getAllJobNames(jobs);\n  }, [jobs, levelTwoString]);\n\n  useEffect(() => {\n    // console.log(alphaList, \"ordered list\");\n\n    const getClickedJobObject = () => {\n      const arrayHold = [];\n      jobs.forEach(function (job) {\n        arrayHold.push(job.ttl === jobName);\n      });\n\n      // console.log(arrayHold);\n      if (arrayHold.includes(true)) {\n        // console.log(\"Array Hold had one true value\")\n        jobs.forEach((jobObj) => {\n          if (jobName === jobObj.ttl) {\n            setJobObj(jobObj);\n          }\n        });\n      } else {\n        jobs.forEach((jobObj) => {\n          let noDashTtl = removeDash(jobObj.ttl);\n          let noDashObj = removeDash(jobObj.title);\n          if (levelTwoString === noDashTtl || levelTwoString === noDashObj) {\n            setJobObj(jobObj);\n          }\n        });\n      }\n    };\n\n    getClickedJobObject();\n  }, [jobName, levelTwoString, jobs]);\n\n  return (\n    <>\n      <div>\n        <Title />\n      </div>\n\n      <div>\n        <LrAutoSearchV2 jobs={jobs} jobTitleList={jobTitleList} {...props} />\n      </div>\n      <div className=\"jobviz-header\">\n        <h4>{levelTwoString}</h4>\n      </div>\n      <div className=\"crumbs\">\n        <small>\n          <Link to={\"/\"}>Jobs</Link> >{\" \"}\n          <Link to={\"/job-catagories\"}>Job Categories</Link> >{\" \"}\n          <Link to={`/job-catagories/${levelOneUrl}`}>{levelOneString}</Link> >{\" \"}\n          {levelTwoString}\n        </small>\n      </div>\n\n      <div className=\"jobviz-parent\">\n        <div className=\"btn-container\">\n          <div\n            type=\"button\"\n            className=\"link-btn\"\n            onClick={() => {\n              props.history.push(\"/\");\n              // console.log(\"you clicked me\");\n            }}\n          >\n            -\n          </div>\n        </div>\n        <div className=\"btn-container\">\n          <div\n            type=\"button\"\n            className=\"link-btn\"\n            onClick={() => {\n              props.history.push(\"/job-catagories\");\n              // console.log(\"you clicked me\");\n            }}\n          >\n            -\n          </div>\n        </div>\n        <div className=\"btn-container\">\n          <div\n            type=\"button\"\n            className=\"link-btn\"\n            onClick={() => {\n              props.history.push(`/job-catagories/${levelOneUrl}`);\n              // console.log(\"you clicked me\");\n            }}\n          >\n            -\n          </div>\n        </div>\n        <div className=\"container-cards\">\n          {alphaList.map((orderedCategory, i) => {\n            {\n              /* console.log(orderedCategory, \"ORDERED\", [i]); */\n            }\n            return (\n              <div\n                key={i}\n                className=\"option\"\n                // onClick={() => setJobName(orderedCategory)}\n              >\n                <LevelThreeCard\n                  key={orderedCategory}\n                  orderedCategory={orderedCategory}\n                  jobs={jobs}\n                  levelOneUrl={levelOneUrl}\n                  levelTwoUrl={levelTwoUrl}\n                  {...props}\n                />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <div className=\"jobviz-parent\">\n        <Table jobObj={jobObj} {...props} />\n      </div>\n    </>\n  );\n};\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level0/Jobs.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneList.js",["93"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\";\nimport { Title } from \"../title/Title\";\nimport \"../styling/Style.css\";\nimport { LevelOneCard } from \"./LevelOneCard\";\nimport { Link } from \"react-router-dom\";\nimport { Table } from \"../table/Table\";\nimport { LrAutoSearchV2 } from \"../search/LRautoSearchV2\";\n\nexport const LevelOneList = (props) => {\n  //All the objects in jobs array\n  const [jobs, setJobs] = useState([]);\n  //Alphabetical list of job Names\n  const [alphaList, setAlphaList] = useState([]);\n  //where I set the id of the category that was clicked to sate\n  const [jobTitleList, setJobTitleList] = useState([]);\n  //where I set the id of the category that was clicked to sate\n  const [jobName, setJobName] = useState([]);\n  //Where the clicked job's object is made avalile\n  const [jobObj, setJobObj] = useState({\n    id: 0,\n    title: \"\",\n    Hierarchy: \"\",\n    OccupationType: \"\",\n    Employment2016: 0,\n    Employment2026: 0,\n    ChgEmploy2016to26Num: 0,\n    ChgEmploy2016to26Perc: 0,\n    PercentSelfEmployed2016: 0,\n    OccupationalOpenings2016to2026AnnualAverage: 0,\n    MedianAnnualWage2017: \"\",\n    TypicalEducationNeededForEntr: \"\",\n    WorkExperienceInARelatedOccupation: \"\",\n    TypicalOnTheJobTrainingNeededToAttainCompetencyInTheOccupation: \"\",\n    ttl: \"\",\n    Level0: \"\",\n    Level4: \"\",\n    Level3: \"\",\n    Level2: \"\",\n    Level1: \"\",\n    pathString: \"\",\n    Def: \"\",\n  });\n\n  //set job obj from GET call to state\n  useEffect(() => {\n    JobManager.getAll().then((jobs) => {\n      setJobs(jobs);\n    });\n  }, []);\n\n  //Set Auto\n  useEffect(() => {\n    const filterLevelOne = () => {\n      let levelList = [];\n\n      jobs.forEach((jobCategory) => {\n        if (\n          jobCategory.Level1 !== \"NA\" &&\n          !levelList.includes(jobCategory.Level1)\n        ) {\n          // levelList.push(jobCategory.Level1);\n          return levelList.push(jobCategory.Level1);\n        }\n      });\n      let sortedList = levelList.sort();\n      setAlphaList(sortedList);\n    };\n\n    ////Call the Function\n    filterLevelOne();\n\n    //get all job Titles for AutoSearch\n    const getAllJobNames = (jobs) => {\n      let jobTList = [];\n      jobs.forEach((job) => {\n        if (!jobTList.includes(job.title)) {\n          jobTList.push(job.title);\n        }\n      });\n      setJobTitleList(jobTList);\n    };\n\n    ////Call the Function\n    getAllJobNames(jobs);\n  }, [jobs]);\n\n  useEffect(() => {\n    const getClickedJobObject = () => {\n      const arrayHold = [];\n      jobs.forEach(function (job) {\n        arrayHold.push(job.ttl === jobName);\n      });\n\n      if (arrayHold.includes(true)) {\n        // console.log(\"Array Hold had one true value\")\n        jobs.forEach((jobObj) => {\n          if (jobName === jobObj.ttl || jobName === jobObj.T) {\n            return setJobObj(jobObj);\n          }\n        });\n      } else {\n        return setJobObj(\"\");\n      }\n    };\n    ////Call the Function\n    getClickedJobObject();\n  }, [jobName, jobs]);\n\n  return (\n    <>\n      <div>\n        <Title />\n      </div>\n      <div>\n        <LrAutoSearchV2 jobs={jobs} jobTitleList={jobTitleList} {...props} />\n      </div>\n      <div className=\"jobviz-header\">\n        <h4>Categories List</h4>\n      </div>\n      <div className=\"crumbs\">\n        <small>\n          <Link to={\"/\"}>Jobs</Link> > Job Categories\n        </small>\n      </div>\n\n      <div className=\"jobviz-parent\">\n        <div className=\"btn-container\">\n          <div\n            type=\"button\"\n            className=\"link-btn\"\n            onClick={() => {\n              props.history.push(\"/\");\n              // console.log(\"you clicked me\");\n            }}\n          >\n            -\n          </div>\n        </div>\n        <div className=\"jobs-parent\">\n          <div className=\"container-cards\">\n            {alphaList.map((orderedCategory, i) => {\n              return (\n                <div\n                  key={i}\n                  // onClick={() => setJobName(orderedCategory)}\n                  className=\"option\"\n                >\n                  <LevelOneCard\n                    key={orderedCategory}\n                    orderedCategory={orderedCategory}\n                    jobs={jobs}\n                    {...props}\n                  />\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n      <div className=\"jobviz-parent\">\n        <Table jobObj={jobObj} {...props} />\n      </div>\n    </>\n  );\n};\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoEndpointList.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeEndpointList.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourList.js",["94"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\";\nimport { Title } from \"../title/Title\";\nimport \"../styling/Style.css\";\nimport { LevelFourCard } from \"./LevelFourCard\";\nimport { makeStringPath, removeDash } from \"../Helper\";\nimport { Link } from \"react-router-dom\";\nimport { Table } from \"../table/Table\";\n// import { Autocomplete } from \"../search/OldSearch\"\n// import {LrAutoSearch} from \"../search/LRautoSearch\"\nimport { LrAutoSearchV2 } from \"../search/LRautoSearchV2\";\n\nexport const LevelFourList = (props) => {\n  //All the objects in jobs array\n  const [jobs, setJobs] = useState([]);\n  //where we set the id of the category that was clicked to sate\n  const [jobName, setJobName] = useState([]);\n  const [jobObj, setJobObj] = useState({\n    id: 0,\n    title: \"\",\n    Hierarchy: \"\",\n    OccupationType: \"\",\n    Employment2016: 0,\n    Employment2026: 0,\n    ChgEmploy2016to26Num: 0,\n    ChgEmploy2016to26Perc: 0,\n    PercentSelfEmployed2016: 0,\n    OccupationalOpenings2016to2026AnnualAverage: 0,\n    MedianAnnualWage2017: \"\",\n    TypicalEducationNeededForEntr: \"\",\n    WorkExperienceInARelatedOccupation: \"\",\n    TypicalOnTheJobTrainingNeededToAttainCompetencyInTheOccupation: \"\",\n    ttl: \"\",\n    Level0: \"\",\n    Level4: \"\",\n    Level3: \"\",\n    Level2: \"\",\n    Level1: \"\",\n    pathString: \"\",\n    Def: \"\",\n  });\n\n  // the level 1 category url sting we need to pass to children\n  const levelOneUrl = props.levelOneUrl;\n  // console.log(levelOneUrl);\n\n  // the level 2 category url sting we need to pass to children\n  const levelTwoUrl = props.levelTwoUrl;\n  // console.log(levelTwoUrl);\n\n  // the level 3 category url sting we need to pass to children\n  const levelThreeUrl = props.category;\n  // console.log(levelThreeUrl);\n\n  let levelOneString = makeStringPath(props.levelOneUrl);\n\n  //the level 2 category 'normal' string we need to match to make sure\n  //we only select level 3 categories that have the same level 1 category\n  let levelTwoString = makeStringPath(props.levelTwoUrl);\n\n  //the level 2 category 'normal' string we need to match to make sure\n  //we only select level 4 categories that have the same level 1 category\n  let levelThreeString = makeStringPath(props.category);\n  // console.log(levelThreeString)\n\n  useEffect(() => {\n    JobManager.getAll().then((jobs) => {\n      setJobs(jobs);\n    });\n  }, []);\n\n  //empty arry to push names of target level (Leve2)\n  let levelList = [];\n\n  // console.log(\"levelList\", levelList)\n  const filsterlevelFour = () =>\n    jobs.forEach((jobCategory) => {\n      let noDash = removeDash(jobCategory.Level3);\n      if (\n        noDash === levelThreeString &&\n        jobCategory.Level4 !== \"NA\" &&\n        !levelList.includes(jobCategory.Level4)\n      ) {\n        levelList.push(jobCategory.Level4);\n      }\n    });\n\n  //call filter\n  filsterlevelFour();\n  //alphabitize sorted list to use when mapping array to DOM\n  const alphaList = levelList.sort();\n  // console.log(\"LevelList\", LevelOneList)\n\n  //OBJECT\n  //This get's the id of whatever category was clicked\n  //THis is the Functionality to get object for Table\n  useEffect(() => {\n    getClickedJobObject();\n  });\n\n  const getClickedJobObject = () => {\n    const arrayHold = [];\n    jobs.forEach(function (job) {\n      arrayHold.push(job.ttl === jobName);\n    });\n\n    // console.log(arrayHold);\n    if (arrayHold.includes(true)) {\n      // console.log(\"Array Hold had one true value\")\n      jobs.forEach((jobObj) => {\n        if (jobName === jobObj.ttl) {\n          setJobObj(jobObj);\n        }\n      });\n    } else {\n      jobs.forEach((jobObj) => {\n        let noDashTtl = removeDash(jobObj.ttl);\n        let noDashObj = removeDash(jobObj.title);\n        if (levelThreeString === noDashTtl || levelThreeString === noDashObj) {\n          // console.log(jobObj.title)\n          setJobObj(jobObj);\n        }\n      });\n    }\n  };\n\n  ///THis is just a test run for search bar choices\n  ///is this where I should pull all titles?\n  //Search Functionality ???????\n  let jobTitleList = [];\n  const getAllJobNames = () =>\n    jobs.forEach((job) => {\n      if (!jobTitleList.includes(job.title)) {\n        jobTitleList.push(job.title);\n      }\n    });\n\n  getAllJobNames();\n\n  return (\n    <>\n      <div>\n        <Title />\n      </div>\n\n      <div>\n        <LrAutoSearchV2 jobs={jobs} jobTitleList={jobTitleList} {...props} />\n      </div>\n      <div className=\"jobviz-header\">\n        <h4>{levelThreeString}</h4>\n      </div>\n      <div className=\"crumbs\">\n        <small>\n          <Link to={\"/\"}>Jobs</Link>>{\" \"}\n          <Link to={\"/job-catagories\"}>Job Categories</Link>>{\" \"}\n          <Link to={`/job-catagories/${levelOneUrl}`}>{levelOneString}</Link>>{\" \"}\n          <Link to={`/job-catagories/${levelOneUrl}/${levelTwoUrl}`}>\n            {levelTwoString}\n          </Link>\n          > {levelThreeString}\n        </small>\n      </div>\n\n      <div className=\"jobviz-parent\">\n        <div className=\"btn-container\">\n          <div\n            type=\"button\"\n            className=\"link-btn\"\n            onClick={() => {\n              props.history.push(\"/\");\n              // console.log(\"you clicked me\");\n            }}\n          >\n            -\n          </div>\n        </div>\n        <div className=\"btn-container\">\n          <div\n            type=\"button\"\n            className=\"link-btn\"\n            onClick={() => {\n              props.history.push(\"/job-catagories\");\n              // console.log(\"you clicked me\");\n            }}\n          >\n            -\n          </div>\n        </div>\n        <div className=\"btn-container\">\n          <div\n            type=\"button\"\n            className=\"link-btn\"\n            onClick={() => {\n              props.history.push(`/job-catagories/${levelOneUrl}`);\n              console.log(\"you clicked me\");\n            }}\n          >\n            -\n          </div>\n        </div>\n        <div className=\"btn-container\">\n          <div\n            type=\"button\"\n            className=\"link-btn\"\n            onClick={() => {\n              props.history.push(\n                `/job-catagories/${levelOneUrl}/${levelTwoUrl}`\n              );\n              // console.log(\"you clicked me\");\n            }}\n          >\n            -\n          </div>\n        </div>\n\n        <div className=\"container-cards\">\n          {alphaList.map((orderedCategory) => {\n            return (\n              <div\n                key={orderedCategory}\n                className=\"option\"\n                // onClick={() => setJobName(orderedCategory)}\n              >\n                <LevelFourCard\n                  key={orderedCategory}\n                  orderedCategory={orderedCategory}\n                  jobs={jobs}\n                  levelOneUrl={levelOneUrl}\n                  levelTwoUrl={levelTwoUrl}\n                  levelThreeUrl={levelThreeUrl}\n                  {...props}\n                />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <div className=\"jobviz-parent\">\n        <Table jobObj={jobObj} {...props} />\n      </div>\n    </>\n  );\n};\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourEndpointList.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoCard.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/Helper.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeCard.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourCard.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/title/Title.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/modules/JobManager.js",["95","96"],"const remoteURL = \"http://localhost:8088\";\n\nexport default {\n  getAll() {\n    return fetch(`/api/convertcsv.json`).then((result) => result.json());\n  },\n  // getJob(param) {\n  //     return fetch(`${remoteURL}/jobs?title=${param}`).then((result) => result.json());\n  // }\n};\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/table/Table.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/search/LRautoSearchV2.js",["97"],"import React, { useState, useEffect } from \"react\";\nimport \"../styling/Style.css\";\nimport { makeUrlPath } from \"../Helper\";\n\nexport const LrAutoSearchV2 = (props) => {\n  const [activeOption, setActiveOption] = useState(0);\n  const [filteredOptions, setFilteredOptions] = useState([]);\n  const [showOptions, setShowOptions] = useState(false);\n  const [userInput, setUserInput] = useState(\"\");\n  const [selectedJob, setSelectedJob] = useState(\"\");\n  const jobTitleList = props.jobTitleList;\n  const jobs = props.jobs;\n  const [selectedJobObj, setSelectedJobObj] = useState({\n    id: 0,\n    title: \"\",\n    Hierarchy: \"\",\n    OccupationType: \"\",\n    Employment2016: 0,\n    Employment2026: 0,\n    ChgEmploy2016to26Num: 0,\n    ChgEmploy2016to26Perc: 0,\n    PercentSelfEmployed2016: 0,\n    OccupationalOpenings2016to2026AnnualAverage: 0,\n    MedianAnnualWage2017: \"\",\n    TypicalEducationNeededForEntr: \"\",\n    WorkExperienceInARelatedOccupation: \"\",\n    TypicalOnTheJobTrainingNeededToAttainCompetencyInTheOccupation: \"\",\n    ttl: \"\",\n    Level0: \"\",\n    Level4: \"\",\n    Level3: \"\",\n    Level2: \"\",\n    Level1: \"\",\n    pathString: \"\",\n    Def: \"\",\n  });\n\n  ////Here is where you filter through array of listed job titles\n  const onChange = (e) => {\n    setUserInput(e.currentTarget.value);\n    setShowOptions(true);\n    setFilteredOptions(\n      jobTitleList.filter(\n        (optionName) =>\n          optionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n      )\n    );\n  };\n\n  // console.log(filteredOptions.length, \"Filtered Options\")\n\n  const onClick = (e) => {\n    setSelectedJob(e.currentTarget.innerText);\n    setShowOptions(false);\n  };\n\n  useEffect(() => {\n    const getSelectedJobObject = () => {\n      jobs.forEach(function (job) {\n        if (job.title === selectedJob) {\n          setSelectedJobObj(job);\n        }\n      });\n    };\n    getSelectedJobObject();\n  }, [selectedJob, jobs]);\n\n  useEffect(() => {\n    const goToJobUrl = (selectedJobObj) => {\n      const jobCatagories = \"job-catagories\";\n      let category = \"\";\n      let title = selectedJobObj.title;\n      let ttl = selectedJobObj.ttl;\n      let level0 = selectedJobObj.Level0;\n      let level1 = selectedJobObj.Level1;\n      let level2 = selectedJobObj.Level2;\n      let level3 = selectedJobObj.Level3;\n      let level4 = selectedJobObj.Level4;\n\n      if (title !== \"\" && (title === level0 || ttl === level0)) {\n        // console.log(level0, `/`);\n        props.history.push(`/`);\n      } else if (\n        title !== \"\" &&\n        (title === level1 || ttl === level1) &&\n        title !== level2 &&\n        title !== level3 &&\n        title !== level4\n      ) {\n        category = makeUrlPath(level1);\n        // console.log(\"Fake URL Level 1\", `/${jobCatagories}/${category}`);\n        props.history.push(`/${jobCatagories}/${category}`);\n      } else if (\n        title !== \"\" &&\n        (title === level2 || ttl === level2) &&\n        title !== level1 &&\n        title !== level3 &&\n        title !== level4\n      ) {\n        level1 = makeUrlPath(level1);\n        category = makeUrlPath(level2);\n        // console.log(\n        //   \"Fake URl Level 2\",\n        //   `/${jobCatagories}/${level1}/${category}/endpoint`\n        // );\n        props.history.push(`/${jobCatagories}/${level1}/${category}/endpoint`);\n      } else if (\n        title !== \"\" &&\n        (title === level3 || ttl === level3) &&\n        title !== level1 &&\n        title !== level2 &&\n        title !== level4\n      ) {\n        level1 = makeUrlPath(level1);\n        level2 = makeUrlPath(level2);\n        category = makeUrlPath(level3);\n\n        // console.log(\n        //   \"Fake URl Level 3\",\n        //   `/${jobCatagories}/${level1}/${level2}/${category}/endpoint`\n        // );\n        props.history.push(\n          `/${jobCatagories}/${level1}/${level2}/${category}/endpoint`\n        );\n      } else if (\n        title !== \"\" &&\n        (title === level4 || ttl === level4) &&\n        title !== level1 &&\n        title !== level2 &&\n        title !== level3\n      ) {\n        level1 = makeUrlPath(level1);\n        level2 = makeUrlPath(level2);\n        level3 = makeUrlPath(level3);\n        category = makeUrlPath(level4);\n\n        // console.log(\n        //   \"Fake URl Level 4\",\n        //   `/${jobCatagories}/${level1}/${level2}/${level3}/${category}/endpoint`\n        // );\n        props.history.push(\n          `/${jobCatagories}/${level1}/${level2}/${level3}/${category}/endpoint`\n        );\n      } else {\n        return;\n      }\n    };\n\n    goToJobUrl(selectedJobObj);\n  }, [selectedJobObj, props.history]);\n\n  const onKeyDown = (e) => {\n    if (e.keyCode === 13) {\n      setUserInput(filteredOptions[activeOption]);\n      setShowOptions(false);\n    } else if (e.keyCode === 38) {\n      if (activeOption === 0) {\n        return;\n      }\n      setActiveOption({ activeOption: activeOption - 1 });\n    } else if (e.keyCode === 40) {\n      if (activeOption === filteredOptions.length - 1) {\n        // console.log(activeOption, \"activeOption\");\n        return;\n      }\n      setActiveOption({ activeOption: activeOption + 1 });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"jobviz-parent\">\n        <div className=\"searchBoxParent\">\n          <div id=\"search_border\" className=\"search\">\n            <input\n              id=\"search_bar\"\n              type=\"text\"\n              placeholder=\"Search Jobs\"\n              className=\"search-box\"\n              onChange={onChange}\n              onKeyDown={onKeyDown}\n              value={userInput}\n            />\n            <div className=\"searchIcon\">\n              <input type=\"submit\" value=\"\" className=\"search-icon\" />\n            </div>\n          </div>\n          <div id=\"float-options\">\n            {showOptions &&\n              userInput &&\n              (filteredOptions.length > 0 ? (\n                <ul className=\"options\">\n                  {filteredOptions.map((optionName, index) => {\n                    let className;\n                    if (index === activeOption) {\n                      className = \"option-active\";\n                    }\n                    return (\n                      <li\n                        className=\"{className}, option\"\n                        key={optionName}\n                        onClick={onClick}\n                      >\n                        {optionName}\n                      </li>\n                    );\n                  })}\n                </ul>\n              ) : (\n                <div className=\"no-options\">\n                  <em>No Option!</em>\n                </div>\n              ))}\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n",["98","99"],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneCard.js",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":12,"column":10,"nodeType":"106","messageId":"107","endLine":12,"endColumn":32},{"ruleId":"108","severity":1,"message":"109","line":196,"column":13,"nodeType":"110","messageId":"111","endLine":198,"endColumn":14},{"ruleId":"104","severity":1,"message":"112","line":18,"column":19,"nodeType":"106","messageId":"107","endLine":18,"endColumn":29},{"ruleId":"104","severity":1,"message":"112","line":17,"column":19,"nodeType":"106","messageId":"107","endLine":17,"endColumn":29},{"ruleId":"104","severity":1,"message":"113","line":1,"column":7,"nodeType":"106","messageId":"107","endLine":1,"endColumn":16},{"ruleId":"114","severity":1,"message":"115","line":3,"column":1,"nodeType":"116","endLine":10,"endColumn":3},{"ruleId":"104","severity":1,"message":"117","line":196,"column":23,"nodeType":"106","messageId":"107","endLine":196,"endColumn":32},{"ruleId":"100","replacedBy":"118"},{"ruleId":"102","replacedBy":"119"},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"no-unused-vars","'LevelThreeEndpointList' is defined but never used.","Identifier","unusedVar","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'setJobName' is assigned a value but never used.","'remoteURL' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'className' is assigned a value but never used.",["120"],["121"],"no-global-assign","no-unsafe-negation"]