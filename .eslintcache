[{"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/index.js":"1","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/JobViz.js":"2","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/images/PrupleDot.js":"3","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/ApplicationViews.js":"4","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/title/Title.js":"5","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/modules/JobManager.js":"6","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/table/Table.js":"7","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/jobs/Jobs.js":"8","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneList.js":"9","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/jobsCategories/JobCatagoriesList.js":"10","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoList.js":"11","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneCard.js":"12","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/jobsCategories/JobCatagoriesCard.js":"13","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/Helper.js":"14","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoCard.js":"15"},{"size":572,"mtime":1607031059345,"results":"16","hashOfConfig":"17"},{"size":190,"mtime":1607028507207,"results":"18","hashOfConfig":"17"},{"size":660,"mtime":1606940842610,"results":"19","hashOfConfig":"17"},{"size":1604,"mtime":1607207123878,"results":"20","hashOfConfig":"17"},{"size":311,"mtime":1607193598843,"results":"21","hashOfConfig":"17"},{"size":235,"mtime":1607193598844,"results":"22","hashOfConfig":"17"},{"size":0,"mtime":1607193598843,"results":"23","hashOfConfig":"17"},{"size":645,"mtime":1607193598839,"results":"24","hashOfConfig":"17"},{"size":3612,"mtime":1607207123883,"results":"25","hashOfConfig":"17"},{"size":2871,"mtime":1607207123881,"results":"26","hashOfConfig":"17"},{"size":3824,"mtime":1607207123884,"results":"27","hashOfConfig":"17"},{"size":951,"mtime":1607207123882,"results":"28","hashOfConfig":"17"},{"size":997,"mtime":1607207123895,"results":"29","hashOfConfig":"17"},{"size":297,"mtime":1607207123880,"results":"30","hashOfConfig":"17"},{"size":865,"mtime":1607207123894,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1x6cskc",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"34"},"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/index.js",[],["70","71"],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/JobViz.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/images/PrupleDot.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/ApplicationViews.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/title/Title.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/modules/JobManager.js",["72"],"const remoteURL = \"http://localhost:8088\";\n\nexport default {\n    getAll() {\n        return fetch(`${remoteURL}/jobs`).then((result) => result.json());\n      },\n    getLevel(param) {\n        return fetch(`${remoteURL}/${param}`)\n    }\n}","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/table/Table.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/jobs/Jobs.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneList.js",["73","74","75"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelOneCard} from \"./LevelOneCard\"\nimport {makeStringPath} from \"../Helper\"\n\nexport const LevelOneList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n      const [levelTwoStr, setLevelTwoStr] = useState([]);\n    // the level 1 category url sting we need to pass to children\n    let levelOneUrl = props.category;\n    //the level 1 category 'normal' string we need to match to make sure \n    //we only select level 2 categories that have the same level 1 category\n    let levelOneString = makeStringPath(props.category);\n\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n    const filsterlevelTwo = () => jobs.map((jobCategory) => {\n        if (jobCategory.Level1 === levelOneString && jobCategory.Level2 !== \"NA\" && !levelList.includes(jobCategory.Level2)) {\n            levelList.push(jobCategory.Level2)\n        }\n    });\n\n   //call filter\n    filsterlevelTwo(); \n    //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort()\n    // console.log(\"LevelList\", LevelOneList)\n\n\n     //This get's the id of whatever category was clicked\n     const handleClick = (e) => {\n        e.preventDefault();\n        // console.log(e.target.id);\n        setLevelTwoStr(e.target.id)\n        }\n        //  console.log(levelTwoStr)\n\n\n    return (\n        <>\n            <div>\n                <Title />\n            </div>        \n            <div className=\"jobviz-parent\">    \n                <div>\n                    <h4>Level Two</h4>\n                </div>  \n            </div> \n            <div className=\"jobviz-parent\"> \n            \n                <div type=\"button\"\n                        className=\"purple-dot-background\"\n                        onClick={() => {\n                        props.history.push(\"/\");\n                        // console.log(\"you clicked me\");\n                }}></div>  \n                <div type=\"button\"\n                        className=\"purple-dot-background\"\n                        onClick={() => {\n                        props.history.push(\"/job-catagories\");\n                        // console.log(\"you clicked me\");\n                }}></div>  \n                <div className=\"jobs-parent\">\n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"\" onClick={handleClick}> \n                                <LevelOneCard\n                                key={orderedCategory}\n                                orderedCategory={orderedCategory}\n                                jobs={jobs}\n                                levelOneUrl={levelOneUrl}\n                                {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n            </div>        \n       </> \n    );\n\n    return (\n        <>\n\n        <div className=\"jobviz-parent\"> \n            \n            <h1>A Test to see if this component is hidden or shown</h1>\n            <h3>{levelOneString}</h3>\n        </div>\n        \n    </>\n\n\n    )\n   \n}\n\n\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/jobsCategories/JobCatagoriesList.js",["76","77"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {JobCatagoriesCard} from \"./JobCatagoriesCard\"\n\n\nexport const JobCatagoriesList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [levelOneStr, setLevelOneStr] = useState([]);\n\n   //set job obj from GET call to state\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of targeted level (Level1)\n    let levelList = []\n    const filterLevelOne = () => jobs.map((jobCategory) => {\n        if (jobCategory.Level1 !== \"NA\" && !levelList.includes(jobCategory.Level1)) {\n            levelList.push(jobCategory.Level1)\n        }\n\n    })\n    //call filter\n    filterLevelOne()\n    //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort()\n\n\n\n    //This get's the id of whatever category was clicked\n    const handleClick = (e) => {\n        e.preventDefault();\n        // console.log(e.target.id);\n        setLevelOneStr(e.target.id)\n        }\n        //  console.log(levelOneStr)\n\n    return (\n        <>\n            <div>\n                <Title />\n            </div> \n            <div className=\"jobviz-parent\">    \n                <div>\n                    <h4>Job Categories List</h4>\n                </div>  \n            </div>   \n            <div className=\"jobviz-parent\"> \n                <div type=\"button\"\n                        className=\"purple-dot-background\"\n                        onClick={() => {\n                        props.history.push(\"/\");\n                        // console.log(\"you clicked me\");\n                }}></div>  \n                <div className=\"jobs-parent\">\n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                            return (\n                                \n                                <div key={orderedCategory} className=\"\" onClick={handleClick}>\n                                    <JobCatagoriesCard\n                                        \n                                        id={orderedCategory.id}\n                                        key={orderedCategory}\n                                        orderedCategory={orderedCategory}\n                                        jobs={jobs}\n                                        {...props}\n                                    />  \n                                </div>\n                                \n                            )\n                        })}\n                    </div>\n                </div>\n            </div>        \n       </> \n    );\n};","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoList.js",["78","79"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelTwoCard} from \"./LevelTwoCard\"\nimport {makeStringPath} from \"../Helper\"\n\nexport const LevelTwoList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [levelThreeStr, setLevelThreeStr] = useState([]);\n    // the level 1 category url sting we need to pass to children\n    const levelOneUrl = props.levelOneUrl;\n    // the level 2 category url sting we need to pass to children\n    const levelTwoUrl = props.category;\n     //the level 2 category 'normal' string we need to match to make sure \n    //we only select level 3 categories that have the same level 1 category\n    let levelTwoString = makeStringPath(props.category);\n\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n    const filsterlevelThree = () => jobs.map((jobCategory) => {\n        if (jobCategory.Level2 === levelTwoString && jobCategory.Level3 !== \"NA\" && !levelList.includes(jobCategory.Level3)) {\n            levelList.push(jobCategory.Level3)\n        }\n    });\n\n    //call filter\n    filsterlevelThree();  \n     //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort();\n    // console.log(\"LevelList\", LevelOneList)\n\n     //This get's the id of whatever category was clicked\n     const handleClick = (e) => {\n        e.preventDefault();\n        // console.log(e.target.id);\n        setLevelThreeStr(e.target.id)\n        }\n        //  console.log(levelTwoStr)\n\n   return (\n        <>\n        <div>\n            <Title />\n        </div>\n        <div className=\"jobviz-parent\">    \n                <div>\n                    <h4>Level Three</h4>\n                </div>  \n            </div>  \n        <div className=\"jobviz-parent\"> \n        <div type=\"button\"\n                        className=\"purple-dot-background\"\n                        onClick={() => {\n                        props.history.push(\"/\");\n                        // console.log(\"you clicked me\");\n                }}></div>  \n                <div type=\"button\"\n                        className=\"purple-dot-background\"\n                        onClick={() => {\n                        props.history.push(\"/job-catagories\");\n                        // console.log(\"you clicked me\");\n                }}></div> \n                <div type=\"button\"\n                        className=\"purple-dot-background\"\n                        onClick={() => {\n                        props.history.push(`/job-catagories/${levelOneUrl}`);\n                        // console.log(\"you clicked me\");\n                }}></div> \n       \n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"l2-color-border\" onClick={handleClick}> \n                                <LevelTwoCard\n                                    key={orderedCategory}\n                                    orderedCategory={orderedCategory}\n                                    jobs={jobs}\n                                    levelOneUrl={levelOneUrl}\n                                    levelTwoUrl={levelTwoUrl}\n                                    {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n            \n    \n         \n        \n        \n        \n    </>\n)\n}","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneCard.js",["80","81"],"import React, { useState, useEffect } from \"react\";\nimport {makeUrlPath} from \"../Helper\"\n\n\n\nexport const LevelOneCard = (props) => {\nlet levelOneUrl = props.levelOneUrl;\nlet categoryStr = props.orderedCategory;\nlet category = makeUrlPath(categoryStr);\n\n// console.log(category)\n\n\n\n// const handleCLick = () => {\n//   console.log (props.category + \" was clicked\")\n// }\n\n\n  return (\n    <>\n      <div className=\"jobviz-parent-level1\">                           \n        \n          <div type=\"button\"\n                            className=\"purple-dot-background-level1\"\n                            onClick={() => {\n            \n                            props.history.push(`/job-catagories/${levelOneUrl}/${category}`);\n                            // console.log(\"you clicked me\");\n                    }}></div>\n          <div id={categoryStr} className=\"listed-categories\">\n              {categoryStr}\n          </div>\n\n\n    </div>\n    </>\n  );\n};\n\n\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/jobsCategories/JobCatagoriesCard.js",["82","83","84"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {makeUrlPath} from \"../Helper\"\n\n\n\nexport const JobCatagoriesCard = (props) => {\n  //String of Category\n  let categoryStr = props.orderedCategory\n\n//URL appropriate String of Category\n  let category = makeUrlPath(categoryStr);\n\n\n// const handleCLick = () => {\n//   console.log (props.category + \" was clicked\")\n// }\n\n  return (\n    <>\n      <div className=\"jobviz-parent-level1\">                           \n        \n          <div type=\"button\"\n                            className=\"purple-dot-background-level1\"\n                            onClick={() => {\n                            \n                            props.history.push(`/job-catagories/${category}`);\n                            // console.log(\"you clicked me\");\n                    }}></div>\n          <div id={categoryStr} className=\"listed-categories\">\n              {categoryStr}\n          </div>\n\n\n    </div>\n    </>\n  );\n};\n\n\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/Helper.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoCard.js",["85","86"],"import React, { useState, useEffect } from \"react\";\nimport {makeUrlPath} from \"../Helper\"\n\n\n\nexport const LevelTwoCard = (props) => {\n  let levelOneUrl = props.levelOneUrl;\n  let levelTwoUrl = props.levelTwoUrl;\n  let categoryStr = props.orderedCategory;\n  let category = makeUrlPath(categoryStr);\n\n\n  return (\n    <>\n      <div className=\"jobviz-parent-level1\">                           \n        \n          <div type=\"button\"\n                            className=\"purple-dot-background-level1\"\n                            onClick={() => {\n                            props.history.push(`/job-catagories/${levelOneUrl}/${levelTwoUrl}/${category}`);\n                            // console.log(\"you clicked me\");\n                    }}></div>\n          <div className=\"listed-categories\">\n              {categoryStr}\n          </div>\n\n\n    </div>\n    </>\n  );\n};\n\n\n",{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":3,"column":1,"nodeType":"93","endLine":19,"endColumn":2},{"ruleId":"94","severity":1,"message":"95","line":12,"column":14,"nodeType":"96","messageId":"97","endLine":12,"endColumn":25},{"ruleId":"98","severity":1,"message":"99","line":27,"column":58,"nodeType":"100","messageId":"101","endLine":27,"endColumn":60},{"ruleId":"102","severity":1,"message":"103","line":95,"column":5,"nodeType":"104","messageId":"105","endLine":107,"endColumn":6},{"ruleId":"94","severity":1,"message":"106","line":12,"column":12,"nodeType":"96","messageId":"97","endLine":12,"endColumn":23},{"ruleId":"98","severity":1,"message":"99","line":23,"column":57,"nodeType":"100","messageId":"101","endLine":23,"endColumn":59},{"ruleId":"94","severity":1,"message":"107","line":12,"column":12,"nodeType":"96","messageId":"97","endLine":12,"endColumn":25},{"ruleId":"98","severity":1,"message":"99","line":29,"column":60,"nodeType":"100","messageId":"101","endLine":29,"endColumn":62},{"ruleId":"94","severity":1,"message":"108","line":1,"column":17,"nodeType":"96","messageId":"97","endLine":1,"endColumn":25},{"ruleId":"94","severity":1,"message":"109","line":1,"column":27,"nodeType":"96","messageId":"97","endLine":1,"endColumn":36},{"ruleId":"94","severity":1,"message":"108","line":1,"column":17,"nodeType":"96","messageId":"97","endLine":1,"endColumn":25},{"ruleId":"94","severity":1,"message":"109","line":1,"column":27,"nodeType":"96","messageId":"97","endLine":1,"endColumn":36},{"ruleId":"94","severity":1,"message":"110","line":2,"column":10,"nodeType":"96","messageId":"97","endLine":2,"endColumn":14},{"ruleId":"94","severity":1,"message":"108","line":1,"column":17,"nodeType":"96","messageId":"97","endLine":1,"endColumn":25},{"ruleId":"94","severity":1,"message":"109","line":1,"column":27,"nodeType":"96","messageId":"97","endLine":1,"endColumn":36},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'levelTwoStr' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'levelOneStr' is assigned a value but never used.","'levelThreeStr' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation"]