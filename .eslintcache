[{"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/index.js":"1","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/JobViz.js":"2","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/images/PrupleDot.js":"3","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/ApplicationViews.js":"4","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/title/Title.js":"5","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/modules/JobManager.js":"6","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/Helper.js":"7","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeList.js":"8","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeCard.js":"9","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoList.js":"10","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoCard.js":"11","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneCard.js":"12","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneList.js":"13","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourList.js":"14","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourCard.js":"15","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level0/Jobs.js":"16","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoEndpointList.js":"17","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeEndpointList.js":"18","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourEndpointList.js":"19","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/search/Search.js":"20","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/table/Table.js":"21"},{"size":572,"mtime":1607031059345,"results":"22","hashOfConfig":"23"},{"size":190,"mtime":1607028507207,"results":"24","hashOfConfig":"23"},{"size":660,"mtime":1606940842610,"results":"25","hashOfConfig":"23"},{"size":3082,"mtime":1607385971681,"results":"26","hashOfConfig":"23"},{"size":311,"mtime":1607193598843,"results":"27","hashOfConfig":"23"},{"size":277,"mtime":1607403077741,"results":"28","hashOfConfig":"23"},{"size":388,"mtime":1607383235825,"results":"29","hashOfConfig":"23"},{"size":4638,"mtime":1607436710698,"results":"30","hashOfConfig":"23"},{"size":1815,"mtime":1607385674271,"results":"31","hashOfConfig":"23"},{"size":5328,"mtime":1607452221312,"results":"32","hashOfConfig":"23"},{"size":1901,"mtime":1607385165632,"results":"33","hashOfConfig":"23"},{"size":1584,"mtime":1607450611488,"results":"34","hashOfConfig":"23"},{"size":4957,"mtime":1607452225013,"results":"35","hashOfConfig":"23"},{"size":5611,"mtime":1607436675841,"results":"36","hashOfConfig":"23"},{"size":992,"mtime":1607385942509,"results":"37","hashOfConfig":"23"},{"size":810,"mtime":1607451787360,"results":"38","hashOfConfig":"23"},{"size":4331,"mtime":1607451368912,"results":"39","hashOfConfig":"23"},{"size":4804,"mtime":1607436708261,"results":"40","hashOfConfig":"23"},{"size":5730,"mtime":1607450073767,"results":"41","hashOfConfig":"23"},{"size":878,"mtime":1607451540593,"results":"42","hashOfConfig":"23"},{"size":1766,"mtime":1607451921499,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1x6cskc",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/index.js",[],["93","94"],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/JobViz.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/images/PrupleDot.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/ApplicationViews.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/title/Title.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/modules/JobManager.js",["95"],"const remoteURL = \"http://localhost:8088\";\n\nexport default {\n    getAll() {\n        return fetch(`${remoteURL}/jobs`).then((result) => result.json());\n      },\n    getJob(param) {\n        return fetch(`${remoteURL}/jobs?title=${param}`).then((result) => result.json());\n    }\n}","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/Helper.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeList.js",["96"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelThreeCard} from \"./LevelThreeCard\"\nimport {makeStringPath, removeDash} from \"../Helper\"\nimport { Link } from \"react-router-dom\";\nimport {Table} from \"../table/Table\"\n\nexport const LevelThreeList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [jobName, setJobName] = useState([]);\n    // the level 1 category url sting we need to pass to children\n    const levelOneUrl = props.levelOneUrl;\n    // the level 2 category url sting we need to pass to children\n    const levelTwoUrl = props.category;\n       //we only select level 2 categories that have the same level 1 category\n    let levelOneString = makeStringPath(props.levelOneUrl);\n     //the level 2 category 'normal' string we need to match to make sure \n    //we only select level 3 categories that have the same level 1 category\n    let levelTwoString = makeStringPath(props.category);\n\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n//    console.log(levelList, \"Here it is\")\n    const filterlevelThree = () => jobs.filter((jobCategory) => {\n        if (removeDash(jobCategory.Level2) === levelTwoString && jobCategory.Level3 !== \"NA\" && !levelList.includes(jobCategory.Level3)) {\n            levelList.push(jobCategory.Level3)\n        }\n    });\n\n    //call filter\n    filterlevelThree();  \n     //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort();\n    // console.log(\"LevelList\", LevelOneList)\n\n     //This get's the id of whatever category was clicked\n     const handleClick = (e) => {\n        e.preventDefault();\n        // console.log(e.target.id);\n        setJobName(e.target.id)\n        }\n        //  console.log(levelTwoStr)\n\n   return (\n        <>\n        <div>\n            <Title />\n        </div>\n        <div className=\"jobviz-header\">    \n                \n                <h4>{levelTwoString}</h4>\n             \n        </div> \n        <div className=\"crumbs\">\n                    <small><Link to={\"/\"}>Jobs</Link> > <Link to={\"/job-catagories\"}>Job Categories</Link> > <Link to={`/job-catagories/${levelOneUrl}`}>{levelOneString}</Link> > {levelTwoString}</small>\n        </div>  \n        \n        <div className=\"jobviz-parent\"> \n            <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                        props.history.push(\"/\");\n                        // console.log(\"you clicked me\");\n                }}>-</div>  \n                </div>\n            <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                            props.history.push(\"/job-catagories\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                </div>\n            <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                            props.history.push(`/job-catagories/${levelOneUrl}`);\n                            console.log(\"you clicked me\");\n                }}>-</div> \n            </div>\n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"l2-color-border\" onClick={handleClick}> \n                                <LevelThreeCard\n                                    key={orderedCategory}\n                                    orderedCategory={orderedCategory}\n                                    jobs={jobs}\n                                    levelOneUrl={levelOneUrl}\n                                    levelTwoUrl={levelTwoUrl}\n                                    {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n                <div className=\"jobviz-parent\">\n                    <Table jobName={jobName} {...props} />\n                </div>\n    \n         \n        \n        \n        \n    </>\n)\n}","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeCard.js",["97","98","99"],"import React, { useState, useEffect } from \"react\";\nimport {makeUrlPath} from \"../Helper\"\n\n\n\nexport const LevelThreeCard = (props) => {\n  let levelOneUrl = props.levelOneUrl;\n  let levelTwoUrl = props.levelTwoUrl;\n  let categoryStr = props.orderedCategory;\n  let category = makeUrlPath(categoryStr);\n  let jobs = props.jobs\n\n  // LR look back at this, there must be simpler way\nlet titleStr = \"\";\nconst findObj = () => {\n  jobs.filter((job)=> {   \n    if(job.Level3 === categoryStr) {\n      \n      let emtStr = job.title;\n      \n      titleStr = emtStr;\n    }\n  })\n}\nfindObj();\n// console.log(\"THis is category\", category); \n\nif(titleStr !== categoryStr) {\n  return (\n    <>\n      <div className=\"jobviz-parent-card\">                           \n      <div className=\"btn-container\">\n          <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n              \n                              props.history.push(`/job-catagories/${levelOneUrl}/${levelTwoUrl}/${category}`);\n                              \n                        \n                    }}>+</div>\n          </div>\n          <div className=\"listed-categories\">\n              {categoryStr}\n          </div>\n\n\n    </div>\n    </>\n  );\n} else { \n    return (\n        <>\n          <div className=\"jobviz-parent-card\">\n            <div className=\"btn-container\">                        \n            <div type=\"button\" className=\"end-btn\" onClick={() => {\n                   \n                   props.history.push(`/job-catagories/${levelOneUrl}/${levelTwoUrl}/endpoint/${category}`);\n                 }}>🥨</div>\n            </div>\n            <div id={categoryStr} className=\"listed-categories\">\n                    {categoryStr}\n            </div>\n          </div>\n\n\n  \n        </>\n  );}\n  \n};\n\n\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoList.js",["100","101","102"],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoCard.js",["103","104"],"import React from \"react\";\nimport {makeUrlPath} from \"../Helper\"\n\n\n\nexport const LevelTwoCard = (props) => {\nlet jobs = props.jobs\nlet levelOneUrl = props.levelOneUrl;\nlet categoryStr = props.orderedCategory;\n// console.log(\"THis is category string\", categoryStr)\nlet category = makeUrlPath(categoryStr);\n\n// LR look back at this, there must be simpler way\nlet titleStr = \"\";\nconst findObj = () => {\n  jobs.filter((job)=> {   \n    if(job.Level2 === categoryStr) {\n      \n      let emtStr = job.title;\n      \n      titleStr = emtStr;\n    }\n  })\n}\nfindObj();\n\nconst bkColorChange = () => {\n  document.body.style.backgroundColor = \"#282c34\"\n}\n// console.log(categoryStr);\n// console.log(titleStr);\n\n// const handleCLick = () => {\n//   console.log (props.category + \" was clicked\")\n// }\n\nif(titleStr !== categoryStr) {\n  return (\n        <>\n        <div className=\"jobviz-parent-card\">                           \n          <div className=\"btn-container\">\n            <div type=\"button\"\n                  className=\"link-btn\"\n                  onClick={() => {\n                    props.history.push(`/job-catagories/${levelOneUrl}/${category}`);\n                  }}>+</div>\n          </div>\n            <div id={categoryStr} className=\"listed-categories\">\n                {categoryStr}\n            </div>\n\n\n      </div>\n      </>\n\n  )\n} else { \n    return (\n        <>\n          <div className=\"jobviz-parent-card\">\n            <div className=\"btn-container\">                        \n              <div type=\"button\" className=\"end-btn\" onClick={() => {\n                   \n                    props.history.push(`/job-catagories/${levelOneUrl}/endpoint/${category}`);\n                  }}>🥨</div>\n            </div>\n            <div id={categoryStr} className=\"listed-categories\">\n                    {categoryStr}\n            </div>\n          </div>\n              \n\n\n        \n        </>\n  );}\n};\n\n\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneCard.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneList.js",["105","106","107","108"],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourList.js",["109"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelFourCard} from \"./LevelFourCard\"\nimport {makeStringPath, removeDash} from \"../Helper\"\nimport { Link } from \"react-router-dom\";\nimport {Table} from \"../table/Table\"\n\nexport const LevelFourList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [jobName, setJobName] = useState([]);\n\n    // the level 1 category url sting we need to pass to children\n    const levelOneUrl = props.levelOneUrl;\n    // the level 2 category url sting we need to pass to children\n    const levelTwoUrl = props.levelTwoUrl;\n    // the level 3 category url sting we need to pass to children\n    const levelThreeUrl = props.category;\n    \n    let levelOneString = makeStringPath(props.levelOneUrl);\n    //the level 2 category 'normal' string we need to match to make sure \n   //we only select level 3 categories that have the same level 1 category\n   let levelTwoString = makeStringPath(props.levelTwoUrl);\n    //the level 2 category 'normal' string we need to match to make sure \n    //we only select level 4 categories that have the same level 1 category\n    let levelThreeString = makeStringPath(props.category);\n    // console.log(levelThreeString)\n\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n    \n    // console.log(\"levelList\", levelList)\n    const filsterlevelFour = () => jobs.filter((jobCategory) => {\n        let noDash = removeDash(jobCategory.Level3)\n        if (noDash === levelThreeString && jobCategory.Level4 !== \"NA\" && !levelList.includes(jobCategory.Level4)) {\n            levelList.push(jobCategory.Level4)\n        }\n    });\n\n    //call filter\n    filsterlevelFour();  \n     //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort();\n    // console.log(\"LevelList\", LevelOneList)\n\n     //This get's the id of whatever category was clicked\n     const handleClick = (e) => {\n        e.preventDefault();\n        // console.log(e.target.id);\n        setJobName(e.target.id)\n        }\n        //  console.log(levelTwoStr)\n\n   return (\n        <>\n        <div>\n            <Title />\n        </div>\n        <div className=\"jobviz-header\">\n                    <h4>{levelThreeString}</h4>\n                </div>  \n            <div className=\"crumbs\">\n                        <small><Link to={\"/\"}>Jobs</Link> > <Link to={\"/job-catagories\"}>Job Categories</Link> > <Link to={`/job-catagories/${levelOneUrl}`}>{levelOneString}</Link> > <Link to={`/job-catagories/${levelOneUrl}/${levelTwoUrl}`}>{levelTwoString}</Link> > {levelThreeString}</small>\n           \n        </div>\n         \n        <div className=\"jobviz-parent\"> \n            <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                            props.history.push(\"/\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                    </div>\n                <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                                props.history.push(\"/job-catagories\");\n                                // console.log(\"you clicked me\");\n                        }}>-</div>  \n                    </div>\n                <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                                props.history.push(`/job-catagories/${levelOneUrl}`);\n                                console.log(\"you clicked me\");\n                    }}>-</div> \n                </div>\n                <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                        props.history.push(`/job-catagories/${levelOneUrl}/${levelTwoUrl}`);\n                        // console.log(\"you clicked me\");\n                }}>-</div>  \n                </div>\n                 \n       \n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"l2-color-border\" onClick={handleClick}> \n                                <LevelFourCard\n                                    key={orderedCategory}\n                                    orderedCategory={orderedCategory}\n                                    jobs={jobs}\n                                    levelOneUrl={levelOneUrl}\n                                    levelTwoUrl={levelTwoUrl}\n                                    levelThreeUrl={levelThreeUrl}\n                                    {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n                <div className=\"jobviz-parent\">\n                    <Table jobName={jobName} {...props} />\n                </div>   \n            \n    \n         \n        \n        \n        \n    </>\n)\n}","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourCard.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level0/Jobs.js",["110"],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoEndpointList.js",["111"],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeEndpointList.js",["112"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelThreeCard} from \"./LevelThreeCard\"\nimport {makeStringPath, removeDash} from \"../Helper\"\nimport { Link } from \"react-router-dom\";\nimport {Table} from \"../table/Table\"\n\nexport const LevelThreeEndpointList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [jobName, setJobName] = useState([]);\n   \n    //endpoint\n    let endpoint = props.category\n    // the level 1 category url sting we need to pass to children\n    const levelOneUrl = props.levelOneUrl;\n    // the level 2 category url sting we need to pass to children\n    const levelTwoUrl = props.levelTwoUrl;\n       //we only select level 2 categories that have the same level 1 category\n    let levelOneString = makeStringPath(levelOneUrl);\n     //the level 2 category 'normal' string we need to match to make sure \n    //we only select level 3 categories that have the same level 1 category\n    let levelTwoString = makeStringPath(levelTwoUrl);\n\n    let endpointString = makeStringPath(endpoint);\n\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n//    console.log(levelList, \"Here it is\")\n    const filterlevelThree = () => jobs.filter((jobCategory) => {\n        if (removeDash(jobCategory.Level2) === levelTwoString && jobCategory.Level3 !== \"NA\" && !levelList.includes(jobCategory.Level3)) {\n            levelList.push(jobCategory.Level3)\n        }\n    });\n\n    //call filter\n    filterlevelThree();  \n     //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort();\n    // console.log(\"LevelList\", LevelOneList)\n\n     //This get's the id of whatever category was clicked\n     const handleClick = (e) => {\n        e.preventDefault();\n        // console.log(e.target.id);\n        setJobName(e.target.id)\n        }\n\n\n   return (\n        <>\n        <div>\n            <Title />\n        </div>\n        <div className=\"jobviz-header\">    \n                \n                <h4>{endpointString}</h4>\n             \n        </div>  \n        \n        <div className=\"crumbs\">\n                    <small><Link to={\"/\"}>Jobs</Link> > <Link to={\"/job-catagories\"}>Job Categories</Link> > <Link to={`/job-catagories/${levelOneUrl}`}>{levelOneString}</Link> > <Link to={`/job-catagories/${levelOneUrl}/${levelTwoUrl}`}>{levelTwoString}</Link> > {endpointString}</small>\n        </div>  \n        \n        <div className=\"jobviz-parent\"> \n            <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                        props.history.push(\"/\");\n                        // console.log(\"you clicked me\");\n                }}>-</div>  \n                </div>\n            <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                            props.history.push(\"/job-catagories\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                </div>\n            <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                            props.history.push(`/job-catagories/${levelOneUrl}`);\n                            console.log(\"you clicked me\");\n                }}>-</div> \n            </div>\n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"l2-color-border\" onClick={handleClick}> \n                                <LevelThreeCard\n                                    key={orderedCategory}\n                                    orderedCategory={orderedCategory}\n                                    jobs={jobs}\n                                    levelOneUrl={levelOneUrl}\n                                    levelTwoUrl={levelTwoUrl}\n                                    {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n                <div className=\"jobviz-parent\">\n                    <Table jobName={jobName} {...props} />\n                </div>\n    \n         \n        \n        \n        \n    </>\n)\n}","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourEndpointList.js",["113"],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/search/Search.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/table/Table.js",[],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":3,"column":1,"nodeType":"120","endLine":10,"endColumn":2},{"ruleId":"121","severity":1,"message":"122","line":34,"column":62,"nodeType":"123","messageId":"124","endLine":34,"endColumn":64},{"ruleId":"125","severity":1,"message":"126","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"129","line":1,"column":27,"nodeType":"127","messageId":"128","endLine":1,"endColumn":36},{"ruleId":"121","severity":1,"message":"122","line":16,"column":20,"nodeType":"123","messageId":"124","endLine":16,"endColumn":22},{"ruleId":"121","severity":1,"message":"122","line":57,"column":61,"nodeType":"123","messageId":"124","endLine":57,"endColumn":63},{"ruleId":"121","severity":1,"message":"130","line":81,"column":19,"nodeType":"131","messageId":"124","endLine":81,"endColumn":28},{"ruleId":"121","severity":1,"message":"122","line":88,"column":34,"nodeType":"123","messageId":"124","endLine":88,"endColumn":36},{"ruleId":"121","severity":1,"message":"122","line":16,"column":20,"nodeType":"123","messageId":"124","endLine":16,"endColumn":22},{"ruleId":"125","severity":1,"message":"132","line":27,"column":7,"nodeType":"127","messageId":"128","endLine":27,"endColumn":20},{"ruleId":"121","severity":1,"message":"122","line":53,"column":60,"nodeType":"123","messageId":"124","endLine":53,"endColumn":62},{"ruleId":"121","severity":1,"message":"130","line":75,"column":19,"nodeType":"131","messageId":"124","endLine":75,"endColumn":28},{"ruleId":"121","severity":1,"message":"122","line":82,"column":34,"nodeType":"123","messageId":"124","endLine":82,"endColumn":36},{"ruleId":"121","severity":1,"message":"122","line":97,"column":56,"nodeType":"123","messageId":"124","endLine":97,"endColumn":58},{"ruleId":"121","severity":1,"message":"122","line":42,"column":62,"nodeType":"123","messageId":"124","endLine":42,"endColumn":64},{"ruleId":"125","severity":1,"message":"133","line":8,"column":16,"nodeType":"127","messageId":"128","endLine":8,"endColumn":25},{"ruleId":"121","severity":1,"message":"122","line":39,"column":60,"nodeType":"123","messageId":"124","endLine":39,"endColumn":62},{"ruleId":"121","severity":1,"message":"122","line":39,"column":62,"nodeType":"123","messageId":"124","endLine":39,"endColumn":64},{"ruleId":"121","severity":1,"message":"122","line":45,"column":62,"nodeType":"123","messageId":"124","endLine":45,"endColumn":64},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","Array.prototype.some() expects a return value from function.","FunctionExpression","'bkColorChange' is assigned a value but never used.","'setJobObj' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]