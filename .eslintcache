[{"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/index.js":"1","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/JobViz.js":"2","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/images/PrupleDot.js":"3","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/ApplicationViews.js":"4","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/title/Title.js":"5","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/modules/JobManager.js":"6","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/Helper.js":"7","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeList.js":"8","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeCard.js":"9","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoList.js":"10","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoCard.js":"11","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneCard.js":"12","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneList.js":"13","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourList.js":"14","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourCard.js":"15","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level0/Jobs.js":"16","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoEndpointList.js":"17","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeEndpointList.js":"18","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourEndpointList.js":"19","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/search/Search.js":"20","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/table/Table.js":"21"},{"size":572,"mtime":1607031059345,"results":"22","hashOfConfig":"23"},{"size":190,"mtime":1607028507207,"results":"24","hashOfConfig":"23"},{"size":660,"mtime":1606940842610,"results":"25","hashOfConfig":"23"},{"size":3082,"mtime":1607385971681,"results":"26","hashOfConfig":"23"},{"size":311,"mtime":1607193598843,"results":"27","hashOfConfig":"23"},{"size":277,"mtime":1607403077741,"results":"28","hashOfConfig":"23"},{"size":388,"mtime":1607383235825,"results":"29","hashOfConfig":"23"},{"size":4484,"mtime":1607400784453,"results":"30","hashOfConfig":"23"},{"size":1815,"mtime":1607385674271,"results":"31","hashOfConfig":"23"},{"size":3934,"mtime":1607400693168,"results":"32","hashOfConfig":"23"},{"size":1901,"mtime":1607385165632,"results":"33","hashOfConfig":"23"},{"size":1584,"mtime":1607383439631,"results":"34","hashOfConfig":"23"},{"size":3676,"mtime":1607403321552,"results":"35","hashOfConfig":"23"},{"size":5441,"mtime":1607400834110,"results":"36","hashOfConfig":"23"},{"size":992,"mtime":1607385942509,"results":"37","hashOfConfig":"23"},{"size":694,"mtime":1607399391862,"results":"38","hashOfConfig":"23"},{"size":4205,"mtime":1607400748460,"results":"39","hashOfConfig":"23"},{"size":4650,"mtime":1607400810562,"results":"40","hashOfConfig":"23"},{"size":5578,"mtime":1607400856148,"results":"41","hashOfConfig":"23"},{"size":874,"mtime":1607400052983,"results":"42","hashOfConfig":"23"},{"size":2387,"mtime":1607403122833,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1x6cskc",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/index.js",[],["95","96"],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/JobViz.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/images/PrupleDot.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/ApplicationViews.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/title/Title.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/modules/JobManager.js",["97"],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/Helper.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeList.js",["98","99"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelThreeCard} from \"./LevelThreeCard\"\nimport {makeStringPath, removeDash} from \"../Helper\"\nimport { Link } from \"react-router-dom\";\n\nexport const LevelThreeList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [jobName, setJobName] = useState([]);\n    // the level 1 category url sting we need to pass to children\n    const levelOneUrl = props.levelOneUrl;\n    // the level 2 category url sting we need to pass to children\n    const levelTwoUrl = props.category;\n       //we only select level 2 categories that have the same level 1 category\n    let levelOneString = makeStringPath(props.levelOneUrl);\n     //the level 2 category 'normal' string we need to match to make sure \n    //we only select level 3 categories that have the same level 1 category\n    let levelTwoString = makeStringPath(props.category);\n\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n//    console.log(levelList, \"Here it is\")\n    const filterlevelThree = () => jobs.filter((jobCategory) => {\n        if (removeDash(jobCategory.Level2) === levelTwoString && jobCategory.Level3 !== \"NA\" && !levelList.includes(jobCategory.Level3)) {\n            levelList.push(jobCategory.Level3)\n        }\n    });\n\n    //call filter\n    filterlevelThree();  \n     //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort();\n    // console.log(\"LevelList\", LevelOneList)\n\n     //This get's the id of whatever category was clicked\n     const handleClick = (e) => {\n        e.preventDefault();\n        // console.log(e.target.id);\n        setJobName(e.target.id)\n        }\n        //  console.log(levelTwoStr)\n\n   return (\n        <>\n        <div>\n            <Title />\n        </div>\n        <div className=\"jobviz-header\">    \n                \n                <h4>{levelTwoString}</h4>\n             \n        </div> \n        <div className=\"crumbs\">\n                    <small><Link to={\"/\"}>Jobs</Link> > <Link to={\"/job-catagories\"}>Job Categories</Link> > <Link to={`/job-catagories/${levelOneUrl}`}>{levelOneString}</Link> > {levelTwoString}</small>\n        </div>  \n        \n        <div className=\"jobviz-parent\"> \n            <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                        props.history.push(\"/\");\n                        // console.log(\"you clicked me\");\n                }}>-</div>  \n                </div>\n            <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                            props.history.push(\"/job-catagories\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                </div>\n            <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                            props.history.push(`/job-catagories/${levelOneUrl}`);\n                            console.log(\"you clicked me\");\n                }}>-</div> \n            </div>\n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"l2-color-border\" onClick={handleClick}> \n                                <LevelThreeCard\n                                    key={orderedCategory}\n                                    orderedCategory={orderedCategory}\n                                    jobs={jobs}\n                                    levelOneUrl={levelOneUrl}\n                                    levelTwoUrl={levelTwoUrl}\n                                    {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n            \n    \n         \n        \n        \n        \n    </>\n)\n}","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeCard.js",["100","101","102"],"import React, { useState, useEffect } from \"react\";\nimport {makeUrlPath} from \"../Helper\"\n\n\n\nexport const LevelThreeCard = (props) => {\n  let levelOneUrl = props.levelOneUrl;\n  let levelTwoUrl = props.levelTwoUrl;\n  let categoryStr = props.orderedCategory;\n  let category = makeUrlPath(categoryStr);\n  let jobs = props.jobs\n\n  // LR look back at this, there must be simpler way\nlet titleStr = \"\";\nconst findObj = () => {\n  jobs.filter((job)=> {   \n    if(job.Level3 === categoryStr) {\n      \n      let emtStr = job.title;\n      \n      titleStr = emtStr;\n    }\n  })\n}\nfindObj();\n// console.log(\"THis is category\", category); \n\nif(titleStr !== categoryStr) {\n  return (\n    <>\n      <div className=\"jobviz-parent-card\">                           \n      <div className=\"btn-container\">\n          <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n              \n                              props.history.push(`/job-catagories/${levelOneUrl}/${levelTwoUrl}/${category}`);\n                              \n                        \n                    }}>+</div>\n          </div>\n          <div className=\"listed-categories\">\n              {categoryStr}\n          </div>\n\n\n    </div>\n    </>\n  );\n} else { \n    return (\n        <>\n          <div className=\"jobviz-parent-card\">\n            <div className=\"btn-container\">                        \n            <div type=\"button\" className=\"end-btn\" onClick={() => {\n                   \n                   props.history.push(`/job-catagories/${levelOneUrl}/${levelTwoUrl}/endpoint/${category}`);\n                 }}>🥨</div>\n            </div>\n            <div id={categoryStr} className=\"listed-categories\">\n                    {categoryStr}\n            </div>\n          </div>\n\n\n  \n        </>\n  );}\n  \n};\n\n\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoList.js",["103","104"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelTwoCard} from \"./LevelTwoCard\"\nimport {makeStringPath, removeDash} from \"../Helper\"\nimport { Link } from \"react-router-dom\";\n\nexport const LevelTwoList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [jobName, setJobName] = useState([]);\n   \n    // the level 1 category url sting we need to pass to children\n    let levelOneUrl = props.category;\n    //the level 1 category 'normal' string we need to match to make sure \n    //we only select level 2 categories that have the same level 1 category\n    let levelOneString = makeStringPath(props.category);\n\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n    // console.log(levelList, \"Here it is ONe\")\n\n    const filsterlevelTwo = () => jobs.filter((jobCategory) => {\n        let noDash = removeDash(jobCategory.Level1)\n        // console.log(noDash)\n        if (noDash === levelOneString && jobCategory.Level2 !== \"NA\" && !levelList.includes(jobCategory.Level2)) {\n            levelList.push(jobCategory.Level2)\n        }\n    });\n\n   //call filter\n    filsterlevelTwo(); \n    //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort()\n    // console.log(\"LevelList\", LevelOneList)\n\n\n     //This get's the id of whatever category was clicked\n     const handleClick = (e) => {\n        e.preventDefault();\n        // console.log(e.target.id);\n        setJobName(e.target.id)\n        }\n        //  console.log(levelTwoStr)\n\n\n    return (\n        <>\n            <div>\n                <Title />\n            </div>        \n            \n                \n            <div className=\"jobviz-header\">    \n                \n                    <h4>{levelOneString}</h4>                 \n            </div> \n            <div className=\"crumbs\">\n                        <small><Link to={\"/\"}>Jobs</Link> > <Link to={\"/job-catagories\"}>Job Categories</Link> > {levelOneString}</small>\n                    </div>\n            <div className=\"jobviz-parent\"> \n                <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                            props.history.push(\"/\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                </div>\n                <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                            props.history.push(\"/job-catagories\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                </div>\n                <div className=\"jobViz-parent\">\n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"\" onClick={handleClick}> \n                                <LevelTwoCard\n                                key={orderedCategory}\n                                orderedCategory={orderedCategory}\n                                jobs={jobs}\n                                levelOneUrl={levelOneUrl}\n                                {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n            </div>        \n       </> \n    );\n\n   \n   \n}\n\n\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoCard.js",["105","106"],"import React from \"react\";\nimport {makeUrlPath} from \"../Helper\"\n\n\n\nexport const LevelTwoCard = (props) => {\nlet jobs = props.jobs\nlet levelOneUrl = props.levelOneUrl;\nlet categoryStr = props.orderedCategory;\n// console.log(\"THis is category string\", categoryStr)\nlet category = makeUrlPath(categoryStr);\n\n// LR look back at this, there must be simpler way\nlet titleStr = \"\";\nconst findObj = () => {\n  jobs.filter((job)=> {   \n    if(job.Level2 === categoryStr) {\n      \n      let emtStr = job.title;\n      \n      titleStr = emtStr;\n    }\n  })\n}\nfindObj();\n\nconst bkColorChange = () => {\n  document.body.style.backgroundColor = \"#282c34\"\n}\n// console.log(categoryStr);\n// console.log(titleStr);\n\n// const handleCLick = () => {\n//   console.log (props.category + \" was clicked\")\n// }\n\nif(titleStr !== categoryStr) {\n  return (\n        <>\n        <div className=\"jobviz-parent-card\">                           \n          <div className=\"btn-container\">\n            <div type=\"button\"\n                  className=\"link-btn\"\n                  onClick={() => {\n                    props.history.push(`/job-catagories/${levelOneUrl}/${category}`);\n                  }}>+</div>\n          </div>\n            <div id={categoryStr} className=\"listed-categories\">\n                {categoryStr}\n            </div>\n\n\n      </div>\n      </>\n\n  )\n} else { \n    return (\n        <>\n          <div className=\"jobviz-parent-card\">\n            <div className=\"btn-container\">                        \n              <div type=\"button\" className=\"end-btn\" onClick={() => {\n                   \n                    props.history.push(`/job-catagories/${levelOneUrl}/endpoint/${category}`);\n                  }}>🥨</div>\n            </div>\n            <div id={categoryStr} className=\"listed-categories\">\n                    {categoryStr}\n            </div>\n          </div>\n              \n\n\n        \n        </>\n  );}\n};\n\n\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneCard.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneList.js",["107","108"],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourList.js",["109","110"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelFourCard} from \"./LevelFourCard\"\nimport {makeStringPath, removeDash} from \"../Helper\"\nimport { Link } from \"react-router-dom\";\n\nexport const LevelFourList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [jobName, setJobName] = useState([]);\n\n    // the level 1 category url sting we need to pass to children\n    const levelOneUrl = props.levelOneUrl;\n    // the level 2 category url sting we need to pass to children\n    const levelTwoUrl = props.levelTwoUrl;\n    // the level 3 category url sting we need to pass to children\n    const levelThreeUrl = props.category;\n    \n    let levelOneString = makeStringPath(props.levelOneUrl);\n    //the level 2 category 'normal' string we need to match to make sure \n   //we only select level 3 categories that have the same level 1 category\n   let levelTwoString = makeStringPath(props.levelTwoUrl);\n    //the level 2 category 'normal' string we need to match to make sure \n    //we only select level 4 categories that have the same level 1 category\n    let levelThreeString = makeStringPath(props.category);\n    // console.log(levelThreeString)\n\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n    \n    // console.log(\"levelList\", levelList)\n    const filsterlevelFour = () => jobs.filter((jobCategory) => {\n        let noDash = removeDash(jobCategory.Level3)\n        if (noDash === levelThreeString && jobCategory.Level4 !== \"NA\" && !levelList.includes(jobCategory.Level4)) {\n            levelList.push(jobCategory.Level4)\n        }\n    });\n\n    //call filter\n    filsterlevelFour();  \n     //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort();\n    // console.log(\"LevelList\", LevelOneList)\n\n     //This get's the id of whatever category was clicked\n     const handleClick = (e) => {\n        e.preventDefault();\n        // console.log(e.target.id);\n        setJobName(e.target.id)\n        }\n        //  console.log(levelTwoStr)\n\n   return (\n        <>\n        <div>\n            <Title />\n        </div>\n        <div className=\"jobviz-header\">\n                    <h4>{levelThreeString}</h4>\n                </div>  \n            <div className=\"crumbs\">\n                        <small><Link to={\"/\"}>Jobs</Link> > <Link to={\"/job-catagories\"}>Job Categories</Link> > <Link to={`/job-catagories/${levelOneUrl}`}>{levelOneString}</Link> > <Link to={`/job-catagories/${levelOneUrl}/${levelTwoUrl}`}>{levelTwoString}</Link> > {levelThreeString}</small>\n           \n        </div>\n         \n        <div className=\"jobviz-parent\"> \n            <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                            props.history.push(\"/\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                    </div>\n                <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                                props.history.push(\"/job-catagories\");\n                                // console.log(\"you clicked me\");\n                        }}>-</div>  \n                    </div>\n                <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                                props.history.push(`/job-catagories/${levelOneUrl}`);\n                                console.log(\"you clicked me\");\n                    }}>-</div> \n                </div>\n                <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                        props.history.push(`/job-catagories/${levelOneUrl}/${levelTwoUrl}`);\n                        // console.log(\"you clicked me\");\n                }}>-</div>  \n                </div>\n                 \n       \n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"l2-color-border\" onClick={handleClick}> \n                                <LevelFourCard\n                                    key={orderedCategory}\n                                    orderedCategory={orderedCategory}\n                                    jobs={jobs}\n                                    levelOneUrl={levelOneUrl}\n                                    levelTwoUrl={levelTwoUrl}\n                                    levelThreeUrl={levelThreeUrl}\n                                    {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n            \n    \n         \n        \n        \n        \n    </>\n)\n}","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourCard.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level0/Jobs.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoEndpointList.js",["111","112"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelTwoCard} from \"./LevelTwoCard\"\nimport {makeStringPath, removeDash} from \"../Helper\"\nimport { Link } from \"react-router-dom\";\n\nexport const LevelTwoEndpointList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [jobName, setJobName] = useState([]);\n    \n      //endpoint\n    let endpoint = props.category\n    // console.log(\"endpoint\", endpoint)\n    // the level 1 category url sting we need to pass to children\n    let levelOneUrl = props.levelOneUrl;\n    // console.log(\"levelONe URL\",levelOneUrl)\n    //the level 1 category 'normal' string we need to match to make sure \n    //we only select level 2 categories that have the same level 1 category\n    let levelOneString = makeStringPath(levelOneUrl);\n    let endpointString = makeStringPath(endpoint);\n\n   \n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n    // console.log(levelList, \"Here it is ONe\")\n\n    const filterlevelTwo = () => jobs.filter((jobCategory) => {\n        let noDash = removeDash(jobCategory.Level1)\n        // console.log(noDash)\n        if (noDash === levelOneString && jobCategory.Level2 !== \"NA\" && !levelList.includes(jobCategory.Level2)) {\n            levelList.push(jobCategory.Level2)\n        }\n    });\n\n   //call filter\n    filterlevelTwo(); \n    //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort()\n    // console.log(\"LevelList\", LevelOneList)\n\n\n     //This get's the id of whatever category was clicked\n     const handleClick = (e) => {\n        e.preventDefault();\n        // console.log(e.target.id);\n        setJobName(e.target.id)\n        }\n        //  console.log(levelTwoStr)\n\n\n    return (\n        <>\n            <div>\n                <Title />\n            </div>        \n            \n                \n            <div className=\"jobviz-header\">    \n                \n                    <h4>{levelOneString}</h4>                 \n            </div> \n            <div className=\"crumbs\">\n                        <small><Link to={\"/\"}>Jobs</Link> > <Link to={\"/job-catagories\"}>Job Categories</Link> > <Link to={`/job-catagories/${levelOneUrl}`}>{levelOneString}</Link> > {endpointString}</small>\n                    </div>\n            <div className=\"jobviz-parent\"> \n                <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                            props.history.push(\"/\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                </div>\n                <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                            props.history.push(\"/job-catagories\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                </div>\n                <div className=\"jobViz-parent\">\n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"\" onClick={handleClick}> \n                                <LevelTwoCard\n                                key={orderedCategory}\n                                orderedCategory={orderedCategory}\n                                jobs={jobs}\n                                levelOneUrl={levelOneUrl}\n                                {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n            </div>        \n       </> \n    );\n\n   \n   \n}\n\n\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeEndpointList.js",["113","114"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelThreeCard} from \"./LevelThreeCard\"\nimport {makeStringPath, removeDash} from \"../Helper\"\nimport { Link } from \"react-router-dom\";\n\nexport const LevelThreeEndpointList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [jobName, setJobName] = useState([]);\n   \n    //endpoint\n    let endpoint = props.category\n    // the level 1 category url sting we need to pass to children\n    const levelOneUrl = props.levelOneUrl;\n    // the level 2 category url sting we need to pass to children\n    const levelTwoUrl = props.levelTwoUrl;\n       //we only select level 2 categories that have the same level 1 category\n    let levelOneString = makeStringPath(levelOneUrl);\n     //the level 2 category 'normal' string we need to match to make sure \n    //we only select level 3 categories that have the same level 1 category\n    let levelTwoString = makeStringPath(levelTwoUrl);\n\n    let endpointString = makeStringPath(endpoint);\n\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n//    console.log(levelList, \"Here it is\")\n    const filterlevelThree = () => jobs.filter((jobCategory) => {\n        if (removeDash(jobCategory.Level2) === levelTwoString && jobCategory.Level3 !== \"NA\" && !levelList.includes(jobCategory.Level3)) {\n            levelList.push(jobCategory.Level3)\n        }\n    });\n\n    //call filter\n    filterlevelThree();  \n     //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort();\n    // console.log(\"LevelList\", LevelOneList)\n\n     //This get's the id of whatever category was clicked\n     const handleClick = (e) => {\n        e.preventDefault();\n        // console.log(e.target.id);\n        setJobName(e.target.id)\n        }\n\n\n   return (\n        <>\n        <div>\n            <Title />\n        </div>\n        <div className=\"jobviz-header\">    \n                \n                <h4>{endpointString}</h4>\n             \n        </div>  \n        \n        <div className=\"crumbs\">\n                    <small><Link to={\"/\"}>Jobs</Link> > <Link to={\"/job-catagories\"}>Job Categories</Link> > <Link to={`/job-catagories/${levelOneUrl}`}>{levelOneString}</Link> > <Link to={`/job-catagories/${levelOneUrl}/${levelTwoUrl}`}>{levelTwoString}</Link> > {endpointString}</small>\n        </div>  \n        \n        <div className=\"jobviz-parent\"> \n            <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                        props.history.push(\"/\");\n                        // console.log(\"you clicked me\");\n                }}>-</div>  \n                </div>\n            <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                            props.history.push(\"/job-catagories\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                </div>\n            <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                            props.history.push(`/job-catagories/${levelOneUrl}`);\n                            console.log(\"you clicked me\");\n                }}>-</div> \n            </div>\n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"l2-color-border\" onClick={handleClick}> \n                                <LevelThreeCard\n                                    key={orderedCategory}\n                                    orderedCategory={orderedCategory}\n                                    jobs={jobs}\n                                    levelOneUrl={levelOneUrl}\n                                    levelTwoUrl={levelTwoUrl}\n                                    {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n            \n    \n         \n        \n        \n        \n    </>\n)\n}","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourEndpointList.js",["115","116"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelFourCard} from \"./LevelFourCard\"\nimport {makeStringPath, removeDash} from \"../Helper\"\nimport { Link } from \"react-router-dom\";\n\nexport const LevelFourEndpointList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [jobName, setJobName] = useState([]);\n    \n    //endpoint\n    let endpoint = props.category\n    // the level 1 category url string we need to pass to children\n    const levelOneUrl = props.levelOneUrl;\n    // the level 2 category url string we need to pass to children\n    const levelTwoUrl = props.levelTwoUrl;\n    // the level 3 category url string we need to pass to children\n    const levelThreeUrl = props.levelThreeUrl;\n    console.log(levelThreeUrl)\n    let levelOneString = makeStringPath(levelOneUrl);\n    //the level 2 category 'normal' string we need to match to make sure \n   //we only select level 3 categories that have the same level 1 category\n   let levelTwoString = makeStringPath(levelTwoUrl);\n    //the level 2 category 'normal' string we need to match to make sure \n    //we only select level 4 categories that have the same level 1 category\n    let levelThreeString = makeStringPath(levelThreeUrl);\n    \n    let endpointString = makeStringPath(endpoint);\n\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n    \n    // console.log(\"levelList\", levelList)\n    const filsterlevelFour = () => jobs.filter((jobCategory) => {\n        let noDash = removeDash(jobCategory.Level3)\n        if (noDash === levelThreeString && jobCategory.Level4 !== \"NA\" && !levelList.includes(jobCategory.Level4)) {\n            levelList.push(jobCategory.Level4)\n        }\n    });\n\n    //call filter\n    filsterlevelFour();  \n     //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort();\n    // console.log(\"LevelList\", LevelOneList)\n\n     //This get's the id of whatever category was clicked\n     const handleClick = (e) => {\n        e.preventDefault();\n        // console.log(e.target.id);\n        setJobName(e.target.id)\n        }\n      \n\n   return (\n        <>\n        <div>\n            <Title />\n        </div>\n        <div className=\"jobviz-header\">\n            <h4>{endpointString}</h4>\n        </div> \n        <div className=\"crumbs\">\n            <small><Link to={\"/\"}>Jobs</Link> > <Link to={\"/job-catagories\"}>Job Categories</Link> > <Link to={`/job-catagories/${levelOneUrl}`}>{levelOneString}</Link> > <Link to={`/job-catagories/${levelOneUrl}/${levelTwoUrl}`}>{levelTwoString}</Link> > <Link to={`/job-catagories/${levelOneUrl}/${levelTwoUrl/levelThreeUrl}`}>{levelThreeString}</Link> > {endpointString}</small>\n           \n        </div>\n           \n        <div className=\"jobviz-parent\"> \n            <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                            props.history.push(\"/\");\n                            // console.log(\"you clicked me\");\n                    }}>-</div>  \n                    </div>\n                <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                                props.history.push(\"/job-catagories\");\n                                // console.log(\"you clicked me\");\n                        }}>-</div>  \n                    </div>\n                <div className=\"btn-container\">\n                    <div type=\"button\"\n                            className=\"link-btn\"\n                            onClick={() => {\n                                props.history.push(`/job-catagories/${levelOneUrl}`);\n                                console.log(\"you clicked me\");\n                    }}>-</div> \n                </div>\n                <div className=\"btn-container\">\n                <div type=\"button\"\n                        className=\"link-btn\"\n                        onClick={() => {\n                        props.history.push(`/job-catagories/${levelOneUrl}/${levelTwoUrl}`);\n                        // console.log(\"you clicked me\");\n                }}>-</div>  \n                </div>\n                 \n       \n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"l2-color-border\" onClick={handleClick}> \n                                <LevelFourCard\n                                    key={orderedCategory}\n                                    orderedCategory={orderedCategory}\n                                    jobs={jobs}\n                                    levelOneUrl={levelOneUrl}\n                                    levelTwoUrl={levelTwoUrl}\n                                    levelThreeUrl={levelThreeUrl}\n                                    {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n            \n    \n         \n        \n        \n        \n    </>\n)\n}","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/search/Search.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/table/Table.js",["117","118","119","120"],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":3,"column":1,"nodeType":"127","endLine":10,"endColumn":2},{"ruleId":"128","severity":1,"message":"129","line":13,"column":12,"nodeType":"130","messageId":"131","endLine":13,"endColumn":19},{"ruleId":"132","severity":1,"message":"133","line":33,"column":62,"nodeType":"134","messageId":"135","endLine":33,"endColumn":64},{"ruleId":"128","severity":1,"message":"136","line":1,"column":17,"nodeType":"130","messageId":"131","endLine":1,"endColumn":25},{"ruleId":"128","severity":1,"message":"137","line":1,"column":27,"nodeType":"130","messageId":"131","endLine":1,"endColumn":36},{"ruleId":"132","severity":1,"message":"133","line":16,"column":20,"nodeType":"134","messageId":"135","endLine":16,"endColumn":22},{"ruleId":"128","severity":1,"message":"129","line":13,"column":12,"nodeType":"130","messageId":"131","endLine":13,"endColumn":19},{"ruleId":"132","severity":1,"message":"133","line":31,"column":61,"nodeType":"134","messageId":"135","endLine":31,"endColumn":63},{"ruleId":"132","severity":1,"message":"133","line":16,"column":20,"nodeType":"134","messageId":"135","endLine":16,"endColumn":22},{"ruleId":"128","severity":1,"message":"138","line":27,"column":7,"nodeType":"130","messageId":"131","endLine":27,"endColumn":20},{"ruleId":"132","severity":1,"message":"133","line":29,"column":60,"nodeType":"134","messageId":"135","endLine":29,"endColumn":62},{"ruleId":"132","severity":1,"message":"133","line":54,"column":52,"nodeType":"134","messageId":"135","endLine":54,"endColumn":54},{"ruleId":"128","severity":1,"message":"129","line":13,"column":12,"nodeType":"130","messageId":"131","endLine":13,"endColumn":19},{"ruleId":"132","severity":1,"message":"133","line":41,"column":62,"nodeType":"134","messageId":"135","endLine":41,"endColumn":64},{"ruleId":"128","severity":1,"message":"129","line":13,"column":12,"nodeType":"130","messageId":"131","endLine":13,"endColumn":19},{"ruleId":"132","severity":1,"message":"133","line":37,"column":60,"nodeType":"134","messageId":"135","endLine":37,"endColumn":62},{"ruleId":"128","severity":1,"message":"129","line":13,"column":12,"nodeType":"130","messageId":"131","endLine":13,"endColumn":19},{"ruleId":"132","severity":1,"message":"133","line":38,"column":62,"nodeType":"134","messageId":"135","endLine":38,"endColumn":64},{"ruleId":"128","severity":1,"message":"129","line":13,"column":12,"nodeType":"130","messageId":"131","endLine":13,"endColumn":19},{"ruleId":"132","severity":1,"message":"133","line":44,"column":62,"nodeType":"134","messageId":"135","endLine":44,"endColumn":64},{"ruleId":"128","severity":1,"message":"137","line":1,"column":17,"nodeType":"130","messageId":"131","endLine":1,"endColumn":26},{"ruleId":"128","severity":1,"message":"139","line":2,"column":8,"nodeType":"130","messageId":"131","endLine":2,"endColumn":18},{"ruleId":"128","severity":1,"message":"140","line":4,"column":9,"nodeType":"130","messageId":"131","endLine":4,"endColumn":20},{"ruleId":"128","severity":1,"message":"141","line":10,"column":19,"nodeType":"130","messageId":"131","endLine":10,"endColumn":29},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'jobName' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useState' is defined but never used.","'useEffect' is defined but never used.","'bkColorChange' is assigned a value but never used.","'JobManager' is defined but never used.","'makeUrlPath' is defined but never used.","'setJobData' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]