[{"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/index.js":"1","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/JobViz.js":"2","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/images/PrupleDot.js":"3","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/ApplicationViews.js":"4","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/title/Title.js":"5","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/modules/JobManager.js":"6","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/table/Table.js":"7","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/Helper.js":"8","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeList.js":"9","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeCard.js":"10","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoList.js":"11","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoCard.js":"12","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneCard.js":"13","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneList.js":"14","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourList.js":"15","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourCard.js":"16","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level0/Jobs.js":"17"},{"size":572,"mtime":1607031059345,"results":"18","hashOfConfig":"19"},{"size":190,"mtime":1607028507207,"results":"20","hashOfConfig":"19"},{"size":660,"mtime":1606940842610,"results":"21","hashOfConfig":"19"},{"size":1737,"mtime":1607361168675,"results":"22","hashOfConfig":"19"},{"size":311,"mtime":1607193598843,"results":"23","hashOfConfig":"19"},{"size":235,"mtime":1607193598844,"results":"24","hashOfConfig":"19"},{"size":0,"mtime":1607193598843,"results":"25","hashOfConfig":"19"},{"size":385,"mtime":1607221937768,"results":"26","hashOfConfig":"19"},{"size":4422,"mtime":1607361168679,"results":"27","hashOfConfig":"19"},{"size":1584,"mtime":1607361168678,"results":"28","hashOfConfig":"19"},{"size":3971,"mtime":1607361168678,"results":"29","hashOfConfig":"19"},{"size":1692,"mtime":1607361168677,"results":"30","hashOfConfig":"19"},{"size":1693,"mtime":1607361168676,"results":"31","hashOfConfig":"19"},{"size":3187,"mtime":1607361168677,"results":"32","hashOfConfig":"19"},{"size":5211,"mtime":1607361168680,"results":"33","hashOfConfig":"19"},{"size":1025,"mtime":1607361168679,"results":"34","hashOfConfig":"19"},{"size":645,"mtime":1607361168675,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1x6cskc",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"38"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/index.js",[],["80","81"],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/JobViz.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/images/PrupleDot.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/ApplicationViews.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/title/Title.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/modules/JobManager.js",["82"],"const remoteURL = \"http://localhost:8088\";\n\nexport default {\n    getAll() {\n        return fetch(`${remoteURL}/jobs`).then((result) => result.json());\n      },\n    getLevel(param) {\n        return fetch(`${remoteURL}/${param}`)\n    }\n}","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/table/Table.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/Helper.js",[],"/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeList.js",["83","84"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelThreeCard} from \"./LevelThreeCard\"\nimport {makeStringPath, removeDash} from \"../Helper\"\nimport { Link } from \"react-router-dom\";\n\nexport const LevelThreeList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [levelThreeStr, setLevelThreeStr] = useState([]);\n    // the level 1 category url sting we need to pass to children\n    const levelOneUrl = props.levelOneUrl;\n    // the level 2 category url sting we need to pass to children\n    const levelTwoUrl = props.category;\n       //we only select level 2 categories that have the same level 1 category\n    let levelOneString = makeStringPath(props.levelOneUrl);\n     //the level 2 category 'normal' string we need to match to make sure \n    //we only select level 3 categories that have the same level 1 category\n    let levelTwoString = makeStringPath(props.category);\n\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n//    console.log(levelList, \"Here it is\")\n    const filsterlevelThree = () => jobs.map((jobCategory) => {\n        if (removeDash(jobCategory.Level2) === levelTwoString && jobCategory.Level3 !== \"NA\" && !levelList.includes(jobCategory.Level3)) {\n            levelList.push(jobCategory.Level3)\n        }\n    });\n\n    //call filter\n    filsterlevelThree();  \n     //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort();\n    // console.log(\"LevelList\", LevelOneList)\n\n     //This get's the id of whatever category was clicked\n     const handleClick = (e) => {\n        e.preventDefault();\n        // console.log(e.target.id);\n        setLevelThreeStr(e.target.id)\n        }\n        //  console.log(levelTwoStr)\n\n   return (\n        <>\n        <div>\n            <Title />\n        </div>\n        <div className=\"crumbs\">\n                    <h6><Link to={\"/\"}>Jobs</Link> > <Link to={\"/job-catagories\"}>Job Categories</Link> > <Link to={`/job-catagories/${levelOneUrl}`}>{levelOneString}</Link> > {levelTwoString}</h6>\n        </div>  \n        <div className=\"jobviz-parent\">    \n                <div>\n                    <h4>{levelTwoString}</h4>\n                    <h6>Level Three that shows selection options for next level (level4)</h6>\n                </div>  \n        </div>  \n        <div className=\"jobviz-parent\"> \n        <div type=\"button\"\n                        className=\"purple-dot-background\"\n                        onClick={() => {\n                        props.history.push(\"/\");\n                        // console.log(\"you clicked me\");\n                }}></div>  \n                <div type=\"button\"\n                        className=\"purple-dot-background\"\n                        onClick={() => {\n                        props.history.push(\"/job-catagories\");\n                        // console.log(\"you clicked me\");\n                }}></div> \n                <div type=\"button\"\n                        className=\"purple-dot-background\"\n                        onClick={() => {\n                        props.history.push(`/job-catagories/${levelOneUrl}`);\n                        // console.log(\"you clicked me\");\n                }}></div> \n       \n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"l2-color-border\" onClick={handleClick}> \n                                <LevelThreeCard\n                                    key={orderedCategory}\n                                    orderedCategory={orderedCategory}\n                                    jobs={jobs}\n                                    levelOneUrl={levelOneUrl}\n                                    levelTwoUrl={levelTwoUrl}\n                                    {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n            \n    \n         \n        \n        \n        \n    </>\n)\n}","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level3/LevelThreeCard.js",["85","86","87","88","89","90","91"],"import React, { useState, useEffect } from \"react\";\nimport {makeUrlPath} from \"../Helper\"\n\n\n\nexport const LevelTwoCard = (props) => {\n  let levelOneUrl = props.levelOneUrl;\n  let levelTwoUrl = props.levelTwoUrl;\n  let categoryStr = props.orderedCategory;\n  let category = makeUrlPath(categoryStr);\n  let jobs = props.jobs\n\n  // LR look back at this, there must be simpler way\nlet titleStr = \"\";\nconst findObj = () => {\n  jobs.filter((job)=> {   \n    if(job.Level3 === categoryStr) {\n      \n      let emtStr = job.title;\n      \n      titleStr = emtStr;\n    }\n  })\n}\nfindObj();\n// console.log(\"THis is category\", category); \n\nif(titleStr !== categoryStr) {\n  return (\n    <>\n      <div className=\"jobviz-parent-level1\">                           \n        \n          <div type=\"button\"\n                            className=\"purple-dot-background-level1\"\n                            onClick={() => {\n              \n                              props.history.push(`/job-catagories/${levelOneUrl}/${levelTwoUrl}/${category}`);\n                              \n                        \n                    }}></div>\n          <div className=\"listed-categories\">\n              {categoryStr}\n          </div>\n\n\n    </div>\n    </>\n  );\n} else { \n    return (\n        <>\n          <div className=\"jobviz-parent-level1\">                          \n            \n              <div id={categoryStr} className=\"listed-categories\">\n                <ul>\n                  <li>{categoryStr}</li>\n                </ul>\n                  \n              </div>\n\n\n        </div>\n        </>\n  );}\n  \n};\n\n\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoList.js",["92","93"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelTwoCard} from \"./LevelTwoCard\"\nimport {makeStringPath, removeDash} from \"../Helper\"\nimport { Link } from \"react-router-dom\";\n\nexport const LevelTwoList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n      const [levelTwoStr, setLevelTwoStr] = useState([]);\n    // the level 1 category url sting we need to pass to children\n    let levelOneUrl = props.category;\n    //the level 1 category 'normal' string we need to match to make sure \n    //we only select level 2 categories that have the same level 1 category\n    let levelOneString = makeStringPath(props.category);\n\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n    // console.log(levelList, \"Here it is ONe\")\n\n    const filsterlevelTwo = () => jobs.map((jobCategory) => {\n        let noDash = removeDash(jobCategory.Level1)\n        // console.log(noDash)\n        if (noDash === levelOneString && jobCategory.Level2 !== \"NA\" && !levelList.includes(jobCategory.Level2)) {\n            levelList.push(jobCategory.Level2)\n        }\n    });\n\n   //call filter\n    filsterlevelTwo(); \n    //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort()\n    // console.log(\"LevelList\", LevelOneList)\n\n\n     //This get's the id of whatever category was clicked\n     const handleClick = (e) => {\n        e.preventDefault();\n        // console.log(e.target.id);\n        setLevelTwoStr(e.target.id)\n        }\n        //  console.log(levelTwoStr)\n\n\n    return (\n        <>\n            <div>\n                <Title />\n            </div>        \n            <div className=\"jobviz-parent\">    \n                <div className=\"crumbs\">\n                    <h6><Link to={\"/\"}>Jobs</Link> > <Link to={\"/job-catagories\"}>Job Categories</Link> > {levelOneString}</h6>\n                </div>\n                \n            </div> \n            <div className=\"jobviz-parent\">    \n                <div>\n                    <h4>{levelOneString}</h4>\n                    <h6>Level2 key value that shows occupational category links for Data Base Level3 key value components</h6>\n                </div>  \n            </div> \n            <div className=\"jobviz-parent\"> \n            \n                <div type=\"button\"\n                        className=\"purple-dot-background\"\n                        onClick={() => {\n                        props.history.push(\"/\");\n                        // console.log(\"you clicked me\");\n                }}></div>  \n                <div type=\"button\"\n                        className=\"purple-dot-background\"\n                        onClick={() => {\n                        props.history.push(\"/job-catagories\");\n                        // console.log(\"you clicked me\");\n                }}></div>  \n                <div className=\"jobs-parent\">\n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"\" onClick={handleClick}> \n                                <LevelTwoCard\n                                key={orderedCategory}\n                                orderedCategory={orderedCategory}\n                                jobs={jobs}\n                                levelOneUrl={levelOneUrl}\n                                {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n            </div>        \n       </> \n    );\n\n   \n   \n}\n\n\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level2/LevelTwoCard.js",["94","95","96"],"import React, { useState, useEffect } from \"react\";\nimport {makeUrlPath} from \"../Helper\"\n\n\n\nexport const LevelOneCard = (props) => {\nlet jobs = props.jobs\nlet levelOneUrl = props.levelOneUrl;\nlet categoryStr = props.orderedCategory;\n// console.log(\"THis is category string\", categoryStr)\nlet category = makeUrlPath(categoryStr);\n\n// LR look back at this, there must be simpler way\nlet titleStr = \"\";\nconst findObj = () => {\n  jobs.filter((job)=> {   \n    if(job.Level2 === categoryStr) {\n      \n      let emtStr = job.title;\n      \n      titleStr = emtStr;\n    }\n  })\n}\nfindObj();\n// console.log(categoryStr);\n// console.log(titleStr);\n\n// const handleCLick = () => {\n//   console.log (props.category + \" was clicked\")\n// }\n\nif(titleStr !== categoryStr) {\n  return (\n        <>\n        <div className=\"jobviz-parent-level1\">                           \n          \n            <div type=\"button\"\n                              className=\"purple-dot-background-level1\"\n                              onClick={() => {\n                              \n                                props.history.push(`/job-catagories/${levelOneUrl}/${category}`);\n                                }}></div>\n          \n            <div id={categoryStr} className=\"listed-categories\">\n                {categoryStr}\n            </div>\n\n\n      </div>\n      </>\n\n  )\n} else { \n    return (\n        <>\n          <div className=\"jobviz-parent-level1\">                          \n            \n              <div id={categoryStr} className=\"listed-categories\">\n                <ul>\n                  <li>{categoryStr}</li>\n                </ul>\n                  \n              </div>\n\n\n        </div>\n        </>\n  );}\n};\n\n\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneCard.js",["97","98","99"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {makeUrlPath} from \"../Helper\"\n\n\n\nexport const LevelOneCard = (props) => {\n  const jobs = props.jobs\n  //String of Category\n  let categoryStr = props.orderedCategory\n\n//URL appropriate String of Category\n  let category = makeUrlPath(categoryStr);\n\n// LR look back at this, there must be simpler way\nlet titleStr = \"\";\nconst findObj = () => {\n  jobs.filter((job)=> {   \n    if(job.Level1 === categoryStr) {\n      \n      let emtStr = job.title;\n      \n      titleStr = emtStr;\n    }\n  })\n}\nfindObj();\n// console.log(categoryStr);\n// console.log(titleStr);\n\n// const handleCLick = () => {\n//   console.log (props.category + \" was clicked\")\n// }\nif(titleStr !== categoryStr) {\n  return (\n        <>\n        <div className=\"jobviz-parent-level1\">                           \n          \n            <div type=\"button\"\n                              className=\"purple-dot-background-level1\"\n                              onClick={() => {\n                              \n                                props.history.push(`/job-catagories/${category}`);\n                                }}></div>\n          \n            <div id={categoryStr} className=\"listed-categories\">\n                {categoryStr}\n            </div>\n\n\n      </div>\n      </>\n\n  )\n} else { \n    return (\n        <>\n          <div className=\"jobviz-parent-level1\">                          \n            \n              <div id={categoryStr} className=\"listed-categories\">\n                <ul>\n                  <li>{categoryStr}</li>\n                </ul>\n                  \n              </div>\n\n\n        </div>\n        </>\n  );}\n};\n\n\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level1/LevelOneList.js",["100","101"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelOneCard} from \"./LevelOneCard\"\nimport { Link } from \"react-router-dom\";\n\nexport const LevelOneList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [levelOneStr, setLevelOneStr] = useState([]);\n\n   //set job obj from GET call to state\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n  \n    //empty arry to push names of targeted level (Level1)\n  \n    let levelList = []\n    // console.log(levelList)\n    const filterLevelOne = () => jobs.map((jobCategory) => {\n        if (jobCategory.Level1 !== \"NA\" && !levelList.includes(jobCategory.Level1)) {\n            levelList.push(jobCategory.Level1);\n        \n        }\n\n    })\n    //call filter\n    filterLevelOne()\n    //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort()\n\n\n\n    //This get's the id of whatever category was clicked\n    const handleClick = (e) => {\n        e.preventDefault();\n        // console.log(e.target.id);\n        setLevelOneStr(e.target.id)\n        }\n        //  console.log(levelOneStr)\n\n    return (\n        <>\n            <div>\n                <Title />\n            </div> \n            <div className=\"crumbs\">\n                <h6><Link to={\"/\"}>Jobs</Link> > Job Categories</h6>\n            </div>\n            <div className=\"jobviz-parent\">    \n                <div>\n                    <h4>Categories List</h4>\n                    <h6>Level1 key values that shows occupational category links for Data Base Level2 key value components</h6>\n                </div>  \n            </div>    \n            <div className=\"jobviz-parent\"> \n                <div type=\"button\"\n                        className=\"purple-dot-background\"\n                        onClick={() => {\n                        props.history.push(\"/\");\n                        // console.log(\"you clicked me\");\n                }}></div>  \n                <div className=\"jobs-parent\">\n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                            return (\n                                \n                                <div key={orderedCategory} className=\"\" onClick={handleClick}>\n                                    <LevelOneCard\n                                        \n                                        id={orderedCategory.id}\n                                        key={orderedCategory}\n                                        orderedCategory={orderedCategory}\n                                        jobs={jobs}\n                                        {...props}\n                                    />  \n                                </div>\n                                \n                            )\n                        })}\n                    </div>\n                </div>\n            </div>        \n       </> \n    );\n};","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourList.js",["102","103"],"import React, { useState, useEffect } from \"react\";\nimport JobManager from \"../../modules/JobManager\"\nimport {Title} from \"../title/Title\"\nimport \"../styling/Style.css\"\nimport {LevelFourCard} from \"./LevelFourCard\"\nimport {makeStringPath, removeDash} from \"../Helper\"\nimport { Link } from \"react-router-dom\";\n\nexport const LevelFourList = (props) => {\n    //All the objects in jobs array\n    const [jobs, setJobs] = useState([]);\n    //where we set the id of the category that was clicked to sate\n    const [levelFourStr, setLevelFourStr] = useState([]);\n    // the level 1 category url sting we need to pass to children\n    const levelOneUrl = props.levelOneUrl;\n    // the level 2 category url sting we need to pass to children\n    const levelTwoUrl = props.levelTwoUrl;\n    // the level 3 category url sting we need to pass to children\n    const levelThreeUrl = props.category;\n    \n    let levelOneString = makeStringPath(props.levelOneUrl);\n    //the level 2 category 'normal' string we need to match to make sure \n   //we only select level 3 categories that have the same level 1 category\n   let levelTwoString = makeStringPath(props.levelTwoUrl);\n    //the level 2 category 'normal' string we need to match to make sure \n    //we only select level 4 categories that have the same level 1 category\n    let levelThreeString = makeStringPath(props.category);\n    // console.log(levelThreeString)\n\n    useEffect(() => {\n        JobManager.getAll().then((jobs) => {\n            setJobs(jobs)\n        })\n    }, []);\n\n    //empty arry to push names of target level (Leve2)\n    let levelList = []\n    \n    // console.log(\"levelList\", levelList)\n    const filsterlevelFour = () => jobs.map((jobCategory) => {\n        let noDash = removeDash(jobCategory.Level3)\n        if (noDash === levelThreeString && jobCategory.Level4 !== \"NA\" && !levelList.includes(jobCategory.Level4)) {\n            levelList.push(jobCategory.Level4)\n        }\n    });\n\n    //call filter\n    filsterlevelFour();  \n     //alphabitize sorted list to use when mapping array to DOM  \n    const alphaList = levelList.sort();\n    // console.log(\"LevelList\", LevelOneList)\n\n     //This get's the id of whatever category was clicked\n     const handleClick = (e) => {\n        e.preventDefault();\n        // console.log(e.target.id);\n        setLevelFourStr(e.target.id)\n        }\n        //  console.log(levelTwoStr)\n\n   return (\n        <>\n        <div>\n            <Title />\n        </div>\n        <div className=\"jobviz-parent\">    \n            <div className=\"crumbs\">\n                        <h6><Link to={\"/\"}>Jobs</Link> > <Link to={\"/job-catagories\"}>Job Categories</Link> > <Link to={`/job-catagories/${levelOneUrl}`}>{levelOneString}</Link> > <Link to={`/job-catagories/${levelOneUrl}/${levelTwoUrl}`}>{levelTwoString}</Link> > {levelThreeString}</h6>\n            </div>       \n        </div>\n        <div>\n                    <h4>{levelThreeString}</h4>\n                    <h6>Level Four that shows endpoint selection options for level (level4)</h6>\n                </div>    \n        <div className=\"jobviz-parent\"> \n        <div type=\"button\"\n                        className=\"purple-dot-background\"\n                        onClick={() => {\n                        props.history.push(\"/\");\n                        // console.log(\"you clicked me\");\n                }}></div>  \n                <div type=\"button\"\n                        className=\"purple-dot-background\"\n                        onClick={() => {\n                        props.history.push(\"/job-catagories\");\n                        // console.log(\"you clicked me\");\n                }}></div> \n                <div type=\"button\"\n                        className=\"purple-dot-background\"\n                        onClick={() => {\n                        props.history.push(`/job-catagories/${levelOneUrl}`);\n                        // console.log(\"you clicked me\");\n                }}></div>\n                 <div type=\"button\"\n                        className=\"purple-dot-background\"\n                        onClick={() => {\n                        props.history.push(`/job-catagories/${levelOneUrl}/${levelTwoUrl}`);\n                        // console.log(\"you clicked me\");\n                }}></div>  \n       \n                    <div className=\"container-cards\">\n                        {alphaList.map((orderedCategory) => {\n                        return (\n                            <div key={orderedCategory} className=\"l2-color-border\" onClick={handleClick}> \n                                <LevelFourCard\n                                    key={orderedCategory}\n                                    orderedCategory={orderedCategory}\n                                    jobs={jobs}\n                                    levelOneUrl={levelOneUrl}\n                                    levelTwoUrl={levelTwoUrl}\n                                    levelThreeUrl={levelThreeUrl}\n                                    {...props}\n                                />\n                            </div>\n                        )\n\n                        })}\n                    </div>\n                </div>\n            \n    \n         \n        \n        \n        \n    </>\n)\n}","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level4/LevelFourCard.js",["104","105","106","107","108","109","110"],"import React, { useState, useEffect } from \"react\";\nimport {makeUrlPath} from \"../Helper\"\n\n\n\nexport const LevelFourCard = (props) => {\n  let levelOneUrl = props.levelOneUrl;\n  let levelTwoUrl = props.levelTwoUrl;\n  let levelThreeUrl = props.levelThree;\n  let categoryStr = props.orderedCategory;\n  let category = makeUrlPath(categoryStr);\n  // console.log(categoryStr, \"level four\");\n  let jobs = props.jobs\n   // LR look back at this, there must be simpler way\n \n  return (\n    <>\n      <div className=\"jobviz-parent-level1\">                           \n        \n          {/* <div type=\"button\"\n                            className=\"purple-dot-background-level1\"\n                            onClick={() => {\n                            \n                            console.log(\"you clicked me\", category);\n                    }}></div> */}\n          <div className=\"listed-categories\">\n            <ul>\n                <li>{categoryStr}</li>\n            </ul>\n              \n          </div>\n\n\n    </div>\n    </>\n  );\n};\n\n\n","/Users/leigharobinson/workspace/TestJobViz/test-job-viz/src/components/level0/Jobs.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":3,"column":1,"nodeType":"117","endLine":19,"endColumn":2},{"ruleId":"118","severity":1,"message":"119","line":13,"column":12,"nodeType":"120","messageId":"121","endLine":13,"endColumn":25},{"ruleId":"122","severity":1,"message":"123","line":33,"column":60,"nodeType":"124","messageId":"125","endLine":33,"endColumn":62},{"ruleId":"118","severity":1,"message":"126","line":1,"column":17,"nodeType":"120","messageId":"121","endLine":1,"endColumn":25},{"ruleId":"118","severity":1,"message":"127","line":1,"column":27,"nodeType":"120","messageId":"121","endLine":1,"endColumn":36},{"ruleId":"118","severity":1,"message":"128","line":7,"column":7,"nodeType":"120","messageId":"121","endLine":7,"endColumn":18},{"ruleId":"118","severity":1,"message":"129","line":8,"column":7,"nodeType":"120","messageId":"121","endLine":8,"endColumn":18},{"ruleId":"118","severity":1,"message":"130","line":9,"column":7,"nodeType":"120","messageId":"121","endLine":9,"endColumn":20},{"ruleId":"118","severity":1,"message":"131","line":11,"column":7,"nodeType":"120","messageId":"121","endLine":11,"endColumn":15},{"ruleId":"118","severity":1,"message":"132","line":13,"column":7,"nodeType":"120","messageId":"121","endLine":13,"endColumn":11},{"ruleId":"118","severity":1,"message":"133","line":13,"column":14,"nodeType":"120","messageId":"121","endLine":13,"endColumn":25},{"ruleId":"122","severity":1,"message":"123","line":30,"column":58,"nodeType":"124","messageId":"125","endLine":30,"endColumn":60},{"ruleId":"118","severity":1,"message":"126","line":1,"column":17,"nodeType":"120","messageId":"121","endLine":1,"endColumn":25},{"ruleId":"118","severity":1,"message":"127","line":1,"column":27,"nodeType":"120","messageId":"121","endLine":1,"endColumn":36},{"ruleId":"122","severity":1,"message":"134","line":16,"column":20,"nodeType":"124","messageId":"125","endLine":16,"endColumn":22},{"ruleId":"118","severity":1,"message":"126","line":1,"column":17,"nodeType":"120","messageId":"121","endLine":1,"endColumn":25},{"ruleId":"118","severity":1,"message":"127","line":1,"column":27,"nodeType":"120","messageId":"121","endLine":1,"endColumn":36},{"ruleId":"122","severity":1,"message":"134","line":16,"column":20,"nodeType":"124","messageId":"125","endLine":16,"endColumn":22},{"ruleId":"118","severity":1,"message":"133","line":13,"column":14,"nodeType":"120","messageId":"121","endLine":13,"endColumn":25},{"ruleId":"122","severity":1,"message":"123","line":30,"column":58,"nodeType":"124","messageId":"125","endLine":30,"endColumn":60},{"ruleId":"118","severity":1,"message":"135","line":13,"column":12,"nodeType":"120","messageId":"121","endLine":13,"endColumn":24},{"ruleId":"122","severity":1,"message":"123","line":40,"column":59,"nodeType":"124","messageId":"125","endLine":40,"endColumn":61},{"ruleId":"118","severity":1,"message":"126","line":1,"column":17,"nodeType":"120","messageId":"121","endLine":1,"endColumn":25},{"ruleId":"118","severity":1,"message":"127","line":1,"column":27,"nodeType":"120","messageId":"121","endLine":1,"endColumn":36},{"ruleId":"118","severity":1,"message":"128","line":7,"column":7,"nodeType":"120","messageId":"121","endLine":7,"endColumn":18},{"ruleId":"118","severity":1,"message":"129","line":8,"column":7,"nodeType":"120","messageId":"121","endLine":8,"endColumn":18},{"ruleId":"118","severity":1,"message":"130","line":9,"column":7,"nodeType":"120","messageId":"121","endLine":9,"endColumn":20},{"ruleId":"118","severity":1,"message":"131","line":11,"column":7,"nodeType":"120","messageId":"121","endLine":11,"endColumn":15},{"ruleId":"118","severity":1,"message":"132","line":13,"column":7,"nodeType":"120","messageId":"121","endLine":13,"endColumn":11},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'levelThreeStr' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useState' is defined but never used.","'useEffect' is defined but never used.","'levelOneUrl' is assigned a value but never used.","'levelTwoUrl' is assigned a value but never used.","'levelThreeUrl' is assigned a value but never used.","'category' is assigned a value but never used.","'jobs' is assigned a value but never used.","'levelTwoStr' is assigned a value but never used.","Array.prototype.filter() expects a return value from arrow function.","'levelFourStr' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]